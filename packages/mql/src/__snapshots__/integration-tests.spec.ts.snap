// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query tests 
SET @positionDataSource = Subselect(<<MQL
    SET @histories = Subselect(<<HistoryMQL
        SELECT
            First(symbol) as symbol,
            Sparkline(price_adjclose, trade_date) as history
        FROM WorkerCache('position_historicalData', CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/5xlr22jszzgb5zb/historicalData.csv')))
        GROUP BY symbol
        HAVING GetLevel() != 0
HistoryMQL
    )
    SELECT
        (symbol) as symbol,
        (history) as history,
        (sector) as sector,
        (industry) as industry,
        (description) as description,
        (totalcash) as totalcash,
        (totaldebt) as totaldebt,
        (bookvalue) as bookvalue,
        (PE) as PE,
        (cashflow) as cashflow,
        (shares_outstanding) as shares_outstanding,
        (FTE) as FTE,
        desk,
        quantity,
        YTD_PnL,
        MTD_PnL,
        WTD_PnL,
        DTD_Realized_PnL,
        average_price_outstanding,
        SparklineToFloatVector(history) as price_adjclose,
        latestprice
    FROM ChangeRowName(
        InnerNaturalJoin(
        'symbol',
        InnerNaturalJoin(
            'symbol',
            InnerNaturalJoin('symbol', CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/hyw2xiszh2p258w/SecurityWithFlags.csv')), @histories),
            CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/eckzx8ns1qh7zk5/position.csv'))),
        RenameColumn(CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/fweovng9csl7mng/latestprice.csv')), 'price_adjclose', 'latestprice')),
        symbol)
MQL
)

set @DataSourceLastAppliedView = 'Team~PnL'
set @ExposurePct = sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) / RootVal( sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) )
set @ExposureLimit = 0.1
SELECT TOP 20
    symbol as symbol ,
    '' as [ ],
    quantity as Quantity,
    latestprice as [Last Price],
    ifelse( symbol != null, '?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol="' || symbol || '"', null ) as Beta,
    sum( DTD_Realized_PnL ) as [P&L.DTD.Realized],
    sum( DTD_Realized_PnL ) as DTD_Realized_PnL,
    sum( GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.DTD.Unrealized],
    sum( DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.DTD.Total],
    ifelse( symbol != null, Length( history ), null) as AdjClosePriceHistory,
    sum( DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) / ( sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) - sum( DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) ) as [P&L.DTD.Total DTD % of Net Exposure],
    sum( WTD_PnL ) as [P&L.WTD.Base],
    sum( WTD_PnL + DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.WTD.Total],
    sum( MTD_PnL ) as [P&L.MTD.Base],
    sum( MTD_PnL + DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.MTD.Total],
    sum( YTD_PnL ) as [P&L.YTD.Base],
    sum( YTD_PnL + DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.YTD.Total],
    sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) as [Net Exposure],
    sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) / RootVal( sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) ) as [Gross Exposure % of Total],
    sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) / ParentVal( sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) ) as [Gross Exposure % of Parent]
FROM
    @positionDataSource
WHERE
    desk in ( 'Example 130/30' )
GROUP BY
    ColumnTag( 'Total' ),
    desk,
    ColumnTag( ifelse( quantity > 0, 'Long', quantity < 0, 'Short', 'Flat' ), 'LongShort', 'LongShort', '[DataSource.Column Key] := ''LongShort''', null ),
    ColumnTag( sector, 'sector', 'sector', '[DataSource.Column Key] := ''sector''', null ),
    ColumnTag( industry, 'industry', 'industry', '[DataSource.Column Key] := ''industry''', null )
    WITH ROLLUP
HAVING
    GetLevel(  ) != 0
ORDER BY
    ifelse( GetLevel(  ) = 4, first( quantity ), null ): 
SET @positionDataSource = Subselect(<<MQL
    SET @histories = Subselect(<<HistoryMQL
        SELECT
            First(symbol) as symbol,
            Sparkline(price_adjclose, trade_date) as history
        FROM WorkerCache('position_historicalData', CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/5xlr22jszzgb5zb/historicalData.csv')))
        GROUP BY symbol
        HAVING GetLevel() != 0
HistoryMQL
    )
    SELECT
        (symbol) as symbol,
        (history) as history,
        (sector) as sector,
        (industry) as industry,
        (description) as description,
        (totalcash) as totalcash,
        (totaldebt) as totaldebt,
        (bookvalue) as bookvalue,
        (PE) as PE,
        (cashflow) as cashflow,
        (shares_outstanding) as shares_outstanding,
        (FTE) as FTE,
        desk,
        quantity,
        YTD_PnL,
        MTD_PnL,
        WTD_PnL,
        DTD_Realized_PnL,
        average_price_outstanding,
        SparklineToFloatVector(history) as price_adjclose,
        latestprice
    FROM ChangeRowName(
        InnerNaturalJoin(
        'symbol',
        InnerNaturalJoin(
            'symbol',
            InnerNaturalJoin('symbol', CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/hyw2xiszh2p258w/SecurityWithFlags.csv')), @histories),
            CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/eckzx8ns1qh7zk5/position.csv'))),
        RenameColumn(CsvToTable(Fetch('https://dl.dropboxusercontent.com/s/fweovng9csl7mng/latestprice.csv')), 'price_adjclose', 'latestprice')),
        symbol)
MQL
)

set @DataSourceLastAppliedView = 'Team~PnL'
set @ExposurePct = sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) / RootVal( sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) )
set @ExposureLimit = 0.1
SELECT TOP 20
    symbol as symbol ,
    '' as [ ],
    quantity as Quantity,
    latestprice as [Last Price],
    ifelse( symbol != null, '?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol="' || symbol || '"', null ) as Beta,
    sum( DTD_Realized_PnL ) as [P&L.DTD.Realized],
    sum( DTD_Realized_PnL ) as DTD_Realized_PnL,
    sum( GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.DTD.Unrealized],
    sum( DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.DTD.Total],
    ifelse( symbol != null, Length( history ), null) as AdjClosePriceHistory,
    sum( DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) / ( sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) - sum( DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) ) as [P&L.DTD.Total DTD % of Net Exposure],
    sum( WTD_PnL ) as [P&L.WTD.Base],
    sum( WTD_PnL + DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.WTD.Total],
    sum( MTD_PnL ) as [P&L.MTD.Base],
    sum( MTD_PnL + DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.MTD.Total],
    sum( YTD_PnL ) as [P&L.YTD.Base],
    sum( YTD_PnL + DTD_Realized_PnL + GetOpenUnrealized( price_adjclose, latestprice, quantity ) ) as [P&L.YTD.Total],
    sum( ifelse( quantity != null, quantity * latestprice, 0 ) ) as [Net Exposure],
    sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) / RootVal( sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) ) as [Gross Exposure % of Total],
    sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) / ParentVal( sum( ifelse( quantity != null, abs( quantity * latestprice ), 0 ) ) ) as [Gross Exposure % of Parent]
FROM
    @positionDataSource
WHERE
    desk in ( 'Example 130/30' )
GROUP BY
    ColumnTag( 'Total' ),
    desk,
    ColumnTag( ifelse( quantity > 0, 'Long', quantity < 0, 'Short', 'Flat' ), 'LongShort', 'LongShort', '[DataSource.Column Key] := ''LongShort''', null ),
    ColumnTag( sector, 'sector', 'sector', '[DataSource.Column Key] := ''sector''', null ),
    ColumnTag( industry, 'industry', 'industry', '[DataSource.Column Key] := ''industry''', null )
    WITH ROLLUP
HAVING
    GetLevel(  ) != 0
ORDER BY
    ifelse( GetLevel(  ) = 4, first( quantity ), null ) 1`] = `
"Path,symbol,\\" \\",Quantity,Last Price,Beta,P&L.DTD.Realized,DTD_Realized_PnL,P&L.DTD.Unrealized,P&L.DTD.Total,AdjClosePriceHistory,P&L.DTD.Total DTD % of Net Exposure,P&L.WTD.Base,P&L.WTD.Total,P&L.MTD.Base,P&L.MTD.Total,P&L.YTD.Base,P&L.YTD.Total,Net Exposure,Gross Exposure % of Total,Gross Exposure % of Parent
/Total/Example 130/30/Short/Healthcare/Specialized Health Services/DVA,DVA,,-1962.77,56.90,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"DVA\\"\\"\\",5404.65,5404.65,16339.88,21744.53,50.00,-0.16,22464.84,44209.37,5027.41,26771.94,18552.53,40297.05,-111671.68,0.00,1.00
/Total/Example 130/30/Short/Healthcare/Specialized Health Services,,,,,,5404.65,5404.65,16339.88,21744.53,,-0.16,22464.84,44209.37,5027.41,26771.94,18552.53,40297.05,-111671.68,0.00,0.03
/Total/Example 130/30/Short/Healthcare/Drug Manufacturers - Major/ABT,ABT,,-3134.24,47.84,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"ABT\\"\\"\\",4259.96,4259.96,-2092.53,2167.43,50.00,-0.01,22135.11,24302.54,18500.37,20667.80,15240.51,17407.94,-149934.61,0.00,1.00
/Total/Example 130/30/Short/Healthcare/Drug Manufacturers - Major,,,,,,4259.96,4259.96,-2092.53,2167.43,,-0.01,22135.11,24302.54,18500.37,20667.80,15240.51,17407.94,-149934.61,0.00,0.05
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/BAX,BAX,,-2462.82,27.63,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"BAX\\"\\"\\",2445.13,2445.13,72712.39,75157.53,50.00,-0.52,1879.71,77037.24,24735.74,99893.27,1221.87,76379.40,-68037.96,0.00,0.08
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/BCR,BCR,,-627.09,461.68,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"BCR\\"\\"\\",1407.43,1407.43,-92935.87,-91528.44,50.00,0.46,20470.14,-71058.30,10562.85,-80965.60,26345.60,-65182.85,-289517.10,0.00,0.36
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/IART,IART,,-1346.95,39.02,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"IART\\"\\"\\",663.24,663.24,17183.38,17846.62,50.00,-0.25,4500.33,22346.95,2044.50,19891.11,89.99,17936.61,-52561.62,0.00,0.06
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/PKI,PKI,,-1990.02,46.93,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"PKI\\"\\"\\",1897.88,1897.88,33365.89,35263.77,50.00,-0.27,2529.31,37793.08,24743.18,60006.95,37894.78,73158.56,-93398.21,0.00,0.11
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/SYK,SYK,,-763.87,107.68,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"SYK\\"\\"\\",417.08,417.08,25159.18,25576.26,50.00,-0.24,2.06,25578.32,4803.27,30379.53,32611.78,58188.04,-82255.76,0.00,0.10
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/WST,WST,,-993.07,93.99,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"WST\\"\\"\\",1730.83,1730.83,2081.02,3811.85,50.00,-0.04,-16325.86,-12514.01,-16959.02,-13147.17,-1706.88,2104.97,-93343.05,0.00,0.11
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies/XRAY,XRAY,,-1919.69,70.35,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"XRAY\\"\\"\\",3907.52,3907.52,-14598.34,-10690.82,50.00,0.09,10210.49,-480.33,11503.12,812.30,-5353.91,-16044.72,-135059.08,0.00,0.17
/Total/Example 130/30/Short/Healthcare/Medical Instruments & Supplies,,,,,,12469.12,12469.12,42967.65,55436.76,,-0.06,23266.19,78702.96,61433.64,116870.40,91103.24,146540.00,-814172.78,0.01,0.25
/Total/Example 130/30/Short/Healthcare/Biotechnology/BIIB,BIIB,,-463.12,285.01,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"BIIB\\"\\"\\",2484.62,2484.62,-10607.41,-8122.79,50.00,0.07,17386.49,9263.70,22976.92,14854.13,26200.09,18077.30,-131994.77,0.00,0.15
/Total/Example 130/30/Short/Healthcare/Biotechnology/BMRN,BMRN,,-1341.14,38.86,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"BMRN\\"\\"\\",1148.46,1148.46,67357.68,68506.14,50.00,-0.57,-3482.78,65023.36,-7324.90,61181.23,9488.97,77995.10,-52111.01,0.00,0.06
/Total/Example 130/30/Short/Healthcare/Biotechnology/CRL,CRL,,-1595.45,81.95,\\"?src:url=demos/PnlTreemapHover.dashboard&width=800&height=600&symbol=\\"\\"CRL\\"\\"\\",3536.64,3536.64,18468.84,22005.48,50.00,-0.14,19026.68,41032.16,2702.06,24707.54,-576.48,21429.00,-130754.04,0.00,0.15
/Total/Example 130/30/Short/Healthcare/Biotechnology,,,,,,15269.84,15269.84,44869.33,60139.17,,-0.06,39082.90,99222.07,66058.71,126197.88,110267.35,170406.52,-871449.24,0.01,0.27
/Total/Example 130/30/Short/Healthcare,,,,,,55455.87,55455.87,311835.07,367290.93,,-0.10,280008.39,647299.33,231368.21,598659.15,356804.40,724095.33,-3194237.48,0.03,0.09
/Total/Example 130/30/Short,,,,,,444504.59,444504.59,-843719.97,-399215.38,,0.01,2380132.52,1980917.14,2946113.23,2546897.85,2620453.86,2221238.48,-34457932.98,0.32,0.32
/Total/Example 130/30,,,,,,1382006.50,1382006.50,-1835304.26,-453297.77,,-0.01,8401235.75,7947937.99,8603437.08,8150139.32,9028348.46,8575050.69,40268533.69,1.00,1.00
/Total,,,,,,1382006.50,1382006.50,-1835304.26,-453297.77,,-0.01,8401235.75,7947937.99,8603437.08,8150139.32,9028348.46,8575050.69,40268533.69,1.00,1.00"
`;

exports[`Query tests 
set @SliderValues = <<csv
value,label
0.42,AUD
0.03,CAD
0.04,CHF
0.11,DKK
0.11,EUR
0.1,GBP
0.01,HKD
0,ILS
0.43,JPY
0.23,NOK
0,NZD
0.21,SEK
0.38,SGD
0.12,USD
csv

set @ConfidenceLevelPct = 0.42
set @StartDate = 19980119
set @EndDate = 20090714

set @Data = Cache( 'Data1', Subselect( <<mql
    set @Pnl5MipWeeklyPath = WorkerCache(
        'pnl5_weekly',
        Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv')
    )
    set @Pnl5MipExpPath = WorkerCache(
        'pnl5_exposures',
        Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv')
    )
    set @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )
    set @tableWithFakeDates = Cache(
        'TWFD',
        AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 ))
    )
    SELECT
        Currency,
        [Book Value] as BookValue,
        VectorsToSparkline(
            DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ),
            FloatVectorFromTable( Currency, @rawTable )
        ) as Scenarios
    FROM
        ExcelCsvToTable( @Pnl5MipExpPath )
mql
) )
set @FilteredData1 = Cache( Rand(  ), Subselect( <<mql
    set @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )
    SELECT First(Currency) as Currency,
        First(BookValue) as BookValue,
        Sparkline(Scenarios, Date) as Scenarios
    FROM Explode(@Data)
    WHERE @NumDate >= @StartDate and @NumDate <= @EndDate
    GROUP BY Currency
    HAVING GetLevel() = 1
mql
, 'Data', @Data, 'StartDate', @StartDate, 'EndDate', @EndDate ) )
set @FilteredData2 = Cache( Rand(  ), Subselect( <<mql
    SELECT Currency as Currency2,
            Scenarios as Scenarios2
    FROM @FilteredData1
mql
, 'FilteredData1', @FilteredData1 ) )

set @MinThreshold = 65
set @ExposureSelectionType = 'Use Sliders'
set @MinThresholdScaled = 0.65
set @ShowGrid = False
set @ShowSliders = True
set @RowPath = '/root/AUD'
set @RowName = 'AUD'
set @CellContents = 'AUD'
set @MessageType = 'SelectedCellChanged'
set @WeightedSchenarioTotal = SparklineSum( SparklineMultiply( @ValueUsed / BookValue, Scenarios ) )
set @PNLVector = Cache(
    IfElse( @IsTotal, 'Grand Total', First( Currency ) ),
    SparklineToFloatVector( SparklineSum( @WeightedSchenarioTotal ) )
)
set @ConfidenceLevel = @ConfidenceLevelPct
set @tailLength = Ceiling( Length( @PNLVector ) * ( 1 - @ConfidenceLevel ) )
set @SliderAdjustedValue = Weight / RootVal( Sum( Weight ) ) * RootVal( Sum( BookValue ) )
set @ValueUsed = @SliderAdjustedValue
set @IsTotal = GetLevel(  ) = 0
set @WeightTable = RemoveColumns(
    AddComputedColumn( CsvToTable( @SliderValues ), 'Currency', label, 'Weight', value ),
    'RowName'
)
def @tailScenFilter(@value) = @value = Idx( SortVector( @PNLVector ), @tailLength )
set @tailScenarioIndex = Cache( 'tsi', RootVal( FirstIndexWhere( @PNLVector, @tailScenFilter, 0 ) ) )

SELECT
    Sum( @ValueUsed ) as [Book Value Used],
    IfElse( @IsTotal, null, Sum( @ValueUsed ) / RootVal( Sum( @ValueUsed ) ) ) as [%],
    Length(@WeightedSchenarioTotal) as PseudoScenarios,
    - Idx( SortVector( @PNLVector ), @tailLength ) as VaR,
    Idx( @PNLVector, @tailScenarioIndex ) / RootVal( Idx( @PNLVector, @tailScenarioIndex ) ) as [VaR Contribution],
    - VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength as ETL,
    - ( VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength ) / Sum( @ValueUsed ) as [ ETL %]
FROM
    FullOuterNaturalJoin( 'Currency', @FilteredData1, @WeightTable )
GROUP BY
    Currency
    WITH ROLLUP NO LEAVES
ORDER BY
    GetName(  ): 
set @SliderValues = <<csv
value,label
0.42,AUD
0.03,CAD
0.04,CHF
0.11,DKK
0.11,EUR
0.1,GBP
0.01,HKD
0,ILS
0.43,JPY
0.23,NOK
0,NZD
0.21,SEK
0.38,SGD
0.12,USD
csv

set @ConfidenceLevelPct = 0.42
set @StartDate = 19980119
set @EndDate = 20090714

set @Data = Cache( 'Data1', Subselect( <<mql
    set @Pnl5MipWeeklyPath = WorkerCache(
        'pnl5_weekly',
        Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv')
    )
    set @Pnl5MipExpPath = WorkerCache(
        'pnl5_exposures',
        Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv')
    )
    set @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )
    set @tableWithFakeDates = Cache(
        'TWFD',
        AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 ))
    )
    SELECT
        Currency,
        [Book Value] as BookValue,
        VectorsToSparkline(
            DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ),
            FloatVectorFromTable( Currency, @rawTable )
        ) as Scenarios
    FROM
        ExcelCsvToTable( @Pnl5MipExpPath )
mql
) )
set @FilteredData1 = Cache( Rand(  ), Subselect( <<mql
    set @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )
    SELECT First(Currency) as Currency,
        First(BookValue) as BookValue,
        Sparkline(Scenarios, Date) as Scenarios
    FROM Explode(@Data)
    WHERE @NumDate >= @StartDate and @NumDate <= @EndDate
    GROUP BY Currency
    HAVING GetLevel() = 1
mql
, 'Data', @Data, 'StartDate', @StartDate, 'EndDate', @EndDate ) )
set @FilteredData2 = Cache( Rand(  ), Subselect( <<mql
    SELECT Currency as Currency2,
            Scenarios as Scenarios2
    FROM @FilteredData1
mql
, 'FilteredData1', @FilteredData1 ) )

set @MinThreshold = 65
set @ExposureSelectionType = 'Use Sliders'
set @MinThresholdScaled = 0.65
set @ShowGrid = False
set @ShowSliders = True
set @RowPath = '/root/AUD'
set @RowName = 'AUD'
set @CellContents = 'AUD'
set @MessageType = 'SelectedCellChanged'
set @WeightedSchenarioTotal = SparklineSum( SparklineMultiply( @ValueUsed / BookValue, Scenarios ) )
set @PNLVector = Cache(
    IfElse( @IsTotal, 'Grand Total', First( Currency ) ),
    SparklineToFloatVector( SparklineSum( @WeightedSchenarioTotal ) )
)
set @ConfidenceLevel = @ConfidenceLevelPct
set @tailLength = Ceiling( Length( @PNLVector ) * ( 1 - @ConfidenceLevel ) )
set @SliderAdjustedValue = Weight / RootVal( Sum( Weight ) ) * RootVal( Sum( BookValue ) )
set @ValueUsed = @SliderAdjustedValue
set @IsTotal = GetLevel(  ) = 0
set @WeightTable = RemoveColumns(
    AddComputedColumn( CsvToTable( @SliderValues ), 'Currency', label, 'Weight', value ),
    'RowName'
)
def @tailScenFilter(@value) = @value = Idx( SortVector( @PNLVector ), @tailLength )
set @tailScenarioIndex = Cache( 'tsi', RootVal( FirstIndexWhere( @PNLVector, @tailScenFilter, 0 ) ) )

SELECT
    Sum( @ValueUsed ) as [Book Value Used],
    IfElse( @IsTotal, null, Sum( @ValueUsed ) / RootVal( Sum( @ValueUsed ) ) ) as [%],
    Length(@WeightedSchenarioTotal) as PseudoScenarios,
    - Idx( SortVector( @PNLVector ), @tailLength ) as VaR,
    Idx( @PNLVector, @tailScenarioIndex ) / RootVal( Idx( @PNLVector, @tailScenarioIndex ) ) as [VaR Contribution],
    - VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength as ETL,
    - ( VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength ) / Sum( @ValueUsed ) as [ ETL %]
FROM
    FullOuterNaturalJoin( 'Currency', @FilteredData1, @WeightTable )
GROUP BY
    Currency
    WITH ROLLUP NO LEAVES
ORDER BY
    GetName(  ) 1`] = `
"Path,Book Value Used,%,PseudoScenarios,VaR,VaR Contribution,ETL,\\" ETL %\\"
/root/AUD,167650525.67,0.19,600.00,-1374486.92,0.00,2299908.53,0.01
/root/CAD,11975037.55,0.01,600.00,-139876.52,0.06,200478.81,0.02
/root/CHF,15966716.73,0.02,600.00,-105431.17,-0.02,235680.20,0.01
/root/DKK,43908471.01,0.05,600.00,-343687.26,-0.17,731499.07,0.02
/root/EUR,43908471.01,0.05,600.00,-341826.18,-0.04,677675.15,0.02
/root/GBP,39916791.83,0.05,600.00,-234811.97,-0.04,544586.68,0.01
/root/HKD,3991679.18,0.00,600.00,-24418.04,0.04,69997.47,0.02
/root/ILS,0.00,0.00,600.00,0.00,0.00,0.00,NaN
/root/JPY,171642204.85,0.20,600.00,-1024931.24,0.61,2984816.52,0.02
/root/NOK,91808621.20,0.11,600.00,-1053105.79,0.07,1985562.38,0.02
/root/NZD,0.00,0.00,600.00,0.00,0.00,0.00,NaN
/root/SEK,83825262.84,0.10,600.00,-800474.53,0.14,1683899.97,0.02
/root/SGD,151683808.94,0.17,600.00,-921875.17,0.27,2814655.75,0.02
/root/USD,47900150.19,0.05,600.00,-305712.31,0.07,640729.06,0.01
/root,874177741.00,,600.00,-5905184.46,1.00,10402404.95,0.01"
`;

exports[`Query tests SELECT
    GetLevel( ),
    GetName( ),
    GetPath( )
FROM
    Lattice( 'x = 1 to 2 step 1, y = 1 to 2 step 1' )
GROUP BY
    1,
    x,
    y
  WITH ROLLUP: SELECT
    GetLevel( ),
    GetName( ),
    GetPath( )
FROM
    Lattice( 'x = 1 to 2 step 1, y = 1 to 2 step 1' )
GROUP BY
    1,
    x,
    y
  WITH ROLLUP 1`] = `
"Path,GetLevel(),GetName(),GetPath()
/root/1/1/1/null,4.00,null,/root/1/1/1/null
/root/1/1/1,3.00,1,/root/1/1/1
/root/1/1/2/null,4.00,null,/root/1/1/2/null
/root/1/1/2,3.00,2,/root/1/1/2
/root/1/1,2.00,1,/root/1/1
/root/1/2/1/null,4.00,null,/root/1/2/1/null
/root/1/2/1,3.00,1,/root/1/2/1
/root/1/2/2/null,4.00,null,/root/1/2/2/null
/root/1/2/2,3.00,2,/root/1/2/2
/root/1/2,2.00,2,/root/1/2
/root/1,1.00,1,/root/1
/root,0.00,root,/root"
`;

exports[`Query tests SELECT * FROM Lattice('x = 1 to 3 step 1'): SELECT * FROM Lattice('x = 1 to 3 step 1') 1`] = `
"Path,x
/null,1.00
/null,2.00
/null,3.00"
`;

exports[`Query tests SELECT GetName(), GetPath() FROM dual GROUP BY 1, 2, 3, 'foo' WITH ROLLUP: SELECT GetName(), GetPath() FROM dual GROUP BY 1, 2, 3, 'foo' WITH ROLLUP 1`] = `
"Path,GetName(),GetPath()
/root/1/2/3/foo/null,null,/root/1/2/3/foo/null
/root/1/2/3/foo,foo,/root/1/2/3/foo
/root/1/2/3,3,/root/1/2/3
/root/1/2,2,/root/1/2
/root/1,1,/root/1
/root,root,/root"
`;

exports[`Query tests SELECT JsEval('Math.sin(x)', 'x', x) FROM Lattice('x = 1 to 3 step 1'): SELECT JsEval('Math.sin(x)', 'x', x) FROM Lattice('x = 1 to 3 step 1') 1`] = `
"Path,\\"JsEval('Math.sin(x)','x',x)\\"
/null,
/null,
/null,"
`;

exports[`Query tests SELECT Sum(x + 1) FROM Lattice('x = 1 to 5 step 1, y = 1 to 3 step 1') GROUP BY x WITH ROLLUP: SELECT Sum(x + 1) FROM Lattice('x = 1 to 5 step 1, y = 1 to 3 step 1') GROUP BY x WITH ROLLUP 1`] = `
"Path,Sum(x+1)
/root/1/null,2.00
/root/1/null,2.00
/root/1/null,2.00
/root/1,6.00
/root/2/null,3.00
/root/2/null,3.00
/root/2/null,3.00
/root/2,9.00
/root/3/null,4.00
/root/3/null,4.00
/root/3/null,4.00
/root/3,12.00
/root/4/null,5.00
/root/4/null,5.00
/root/4/null,5.00
/root/4,15.00
/root/5/null,6.00
/root/5/null,6.00
/root/5/null,6.00
/root/5,18.00
/root,60.00"
`;

exports[`Query tests SELECT Sum(x) FROM Lattice('x = 1 to 5 step 1') GROUP BY x WITH ROLLUP: SELECT Sum(x) FROM Lattice('x = 1 to 5 step 1') GROUP BY x WITH ROLLUP 1`] = `
"Path,Sum(x)
/root/1/null,1.00
/root/1,1.00
/root/2/null,2.00
/root/2,2.00
/root/3/null,3.00
/root/3,3.00
/root/4/null,4.00
/root/4,4.00
/root/5/null,5.00
/root/5,5.00
/root,15.00"
`;

exports[`Query tests SELECT x -2 FROM Lattice('x = 1 to 3 step 1'): SELECT x -2 FROM Lattice('x = 1 to 3 step 1') 1`] = `
"Path,x-2
/null,-1.00
/null,0.00
/null,1.00"
`;

exports[`Query tests SELECT x -2 FROM Lattice('x = 1 to 3 step 1'): SELECT x -2 FROM Lattice('x = 1 to 3 step 1') 2`] = `
"Path,x-2
/null,-1.00
/null,0.00
/null,1.00"
`;

exports[`Query tests SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x: SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x 1`] = `
"Path,x
/root/1,
/root/2,
/root/3,
/root/4,
/root/5,
/root,"
`;

exports[`Query tests SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x: SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x 2`] = `
"Path,x
/root/1,
/root/2,
/root/3,
/root/4,
/root/5,
/root,"
`;

exports[`Query tests SELECT x FROM Lattice('x = 1 to 10 step 1'): SELECT x FROM Lattice('x = 1 to 10 step 1') 1`] = `
"Path,x
/null,1.00
/null,2.00
/null,3.00
/null,4.00
/null,5.00
/null,6.00
/null,7.00
/null,8.00
/null,9.00
/null,10.00"
`;

exports[`Query tests set @table = Lattice( 'x = 1 to 3 step 1, y = 7 to 10 step 1' )
    SELECT
        x,
        y,
        sum( x + y ),
        ParentVal( sum( x + y ) ),
        RootVal( sum( x + y ) )
    FROM
        @table
    GROUP BY
        x
    WITH ROLLUP: set @table = Lattice( 'x = 1 to 3 step 1, y = 7 to 10 step 1' )
    SELECT
        x,
        y,
        sum( x + y ),
        ParentVal( sum( x + y ) ),
        RootVal( sum( x + y ) )
    FROM
        @table
    GROUP BY
        x
    WITH ROLLUP 1`] = `
"Path,x,y,sum(x+y),ParentVal(sum(x+y)),RootVal(sum(x+y))
/root/1/null,1.00,7.00,8.00,38.00,126.00
/root/1/null,1.00,8.00,9.00,38.00,126.00
/root/1/null,1.00,9.00,10.00,38.00,126.00
/root/1/null,1.00,10.00,11.00,38.00,126.00
/root/1,,,38.00,126.00,126.00
/root/2/null,2.00,7.00,9.00,42.00,126.00
/root/2/null,2.00,8.00,10.00,42.00,126.00
/root/2/null,2.00,9.00,11.00,42.00,126.00
/root/2/null,2.00,10.00,12.00,42.00,126.00
/root/2,,,42.00,126.00,126.00
/root/3/null,3.00,7.00,10.00,46.00,126.00
/root/3/null,3.00,8.00,11.00,46.00,126.00
/root/3/null,3.00,9.00,12.00,46.00,126.00
/root/3/null,3.00,10.00,13.00,46.00,126.00
/root/3,,,46.00,126.00,126.00
/root,,,126.00,,126.00"
`;

exports[`Query tests set @tbl = Subselect(<<MQL
    SELECT
        x,
        y,
        ifelse(x % 2 > 0, null, x + y) as s1,
        x + y as s2,
        ifelse(x % 2 > 0, JsEval('return NaN'), 2) as n1,
        2 as n2,
        ifelse(x % 2 > 0, Infinity, 1) as i1,
        1 as i2
    FROM
        Lattice('x = 1 to 10 step 1, y = 1 to 3 step 1')
MQL
)

SELECT
    sum(s1) as [s1.sum],
    avg(s1) as [s1.avg],
    s1 as [s1.ref],
    s2 as [s1.nodrop],
    sum(n1) as [n1.sum],
    avg(n1) as [n1.avg],
    n1 as [n1.ref],
    n2 as [n1.nodrop],
    sum(i1) as [i1.sum],
    avg(i1) as [i1.avg],
    i1 as [i1.ref],
    i2 as [i1.nodrop]
FROM
    @tbl
GROUP BY y WITH ROLLUP: set @tbl = Subselect(<<MQL
    SELECT
        x,
        y,
        ifelse(x % 2 > 0, null, x + y) as s1,
        x + y as s2,
        ifelse(x % 2 > 0, JsEval('return NaN'), 2) as n1,
        2 as n2,
        ifelse(x % 2 > 0, Infinity, 1) as i1,
        1 as i2
    FROM
        Lattice('x = 1 to 10 step 1, y = 1 to 3 step 1')
MQL
)

SELECT
    sum(s1) as [s1.sum],
    avg(s1) as [s1.avg],
    s1 as [s1.ref],
    s2 as [s1.nodrop],
    sum(n1) as [n1.sum],
    avg(n1) as [n1.avg],
    n1 as [n1.ref],
    n2 as [n1.nodrop],
    sum(i1) as [i1.sum],
    avg(i1) as [i1.avg],
    i1 as [i1.ref],
    i2 as [i1.nodrop]
FROM
    @tbl
GROUP BY y WITH ROLLUP 1`] = `
"Path,s1.sum,s1.avg,s1.ref,s1.nodrop,n1.sum,n1.avg,n1.ref,n1.nodrop,i1.sum,i1.avg,i1.ref,i1.nodrop
/root/1/null,0.00,NaN,,2.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,3.00,3.00,3.00,3.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,4.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,5.00,5.00,5.00,5.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,6.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,7.00,7.00,7.00,7.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,8.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,9.00,9.00,9.00,9.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,10.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,11.00,11.00,11.00,11.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1,35.00,7.00,,,NaN,NaN,,,Infinity,Infinity,,
/root/2/null,0.00,NaN,,3.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,4.00,4.00,4.00,4.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,5.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,6.00,6.00,6.00,6.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,7.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,8.00,8.00,8.00,8.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,9.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,10.00,10.00,10.00,10.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,11.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,12.00,12.00,12.00,12.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2,40.00,8.00,,,NaN,NaN,,,Infinity,Infinity,,
/root/3/null,0.00,NaN,,4.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,5.00,5.00,5.00,5.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,6.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,7.00,7.00,7.00,7.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,8.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,9.00,9.00,9.00,9.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,10.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,11.00,11.00,11.00,11.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,12.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,13.00,13.00,13.00,13.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3,45.00,9.00,,,NaN,NaN,,,Infinity,Infinity,,
/root,120.00,8.00,,,NaN,NaN,,,Infinity,Infinity,,"
`;
