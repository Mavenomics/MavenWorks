{
	"layout": {
		"properties": {
			"flexSize": 1
		},
		"typeName": 0,
		"uuid": "84f9e3ae-d6df-4bf8-aed8-5ef1c8abb47f",
		"attachedProperties": [
			{
				"Fixed Size (px)": null,
				"Stretch": 1
			}
		],
		"children": [
			{
				"properties": {
					"horizontal": true,
					"flexSize": 1
				},
				"typeName": 0,
				"uuid": "e2c78e82-9a5c-4278-96a8-c7625b447799",
				"attachedProperties": [
					{
						"Fixed Size (px)": null,
						"Stretch": 0.58
					},
					{
						"Fixed Size (px)": null,
						"Stretch": 1.41
					}
				],
				"children": [
					{
						"properties": {
							"horizontal": false,
							"flexSize": 0.58
						},
						"typeName": 0,
						"uuid": "77131348-ec32-4785-88de-652a9ac80f30",
						"attachedProperties": [
							{
								"Fixed Size (px)": null,
								"Stretch": 1.7167885024247893
							},
							{
								"Fixed Size (px)": null,
								"Stretch": 0.27661809629862333
							}
						],
						"children": [
							{
								"properties": {
									"flexSize": 1,
									"caption": "Correlations",
									"showTitle": false
								},
								"typeName": 1,
								"uuid": "1bc49b9a-c3fd-40ad-9904-38c7e8f6bd4c",
								"guid": "fb2b2972-be30-4d08-8e3c-b94094e56d28"
							},
							{
								"properties": {
									"flexSize": 1,
									"caption": "Date Range",
									"showTitle": true
								},
								"typeName": 1,
								"uuid": "e545fbb1-9df5-4571-8194-df89bbd0a84a",
								"guid": "7f869078-07bd-4af6-9041-9bc5733ea959"
							}
						]
					},
					{
						"properties": {
							"horizontal": false,
							"flexSize": 1.41
						},
						"typeName": 0,
						"uuid": "400335e7-b405-45e8-b448-a19e9080e841",
						"attachedProperties": [
							{
								"Fixed Size (px)": null,
								"Stretch": 1.0607734806629834
							},
							{
								"Fixed Size (px)": null,
								"Stretch": 0.2681126949726809
							},
							{
								"Fixed Size (px)": null,
								"Stretch": 1.664946735447636
							}
						],
						"children": [
							{
								"properties": {
									"flexSize": 1,
									"caption": "SlickGrid",
									"showTitle": false
								},
								"typeName": 1,
								"uuid": "3d1ac0cc-d983-4d66-9d91-dc6e87f5dc4d",
								"guid": "2c5e83b7-8905-4e73-b2a5-e6c40f8c24e5"
							},
							{
								"properties": {
									"showRegion": true,
									"showTitle": true,
									"caption": "Confidence Level"
								},
								"typeName": 1,
								"uuid": "3a1a23b8-02ec-4145-baf7-02ab1f9d2d8e",
								"guid": "fa6f19c4-191f-4c2a-ade4-50af79acd98e"
							},
							{
								"properties": {
									"horizontal": true,
									"flexSize": 1
								},
								"typeName": 0,
								"uuid": "5e73759f-002d-40d0-830a-4ff72de99c9a",
								"attachedProperties": [
									{
										"Fixed Size (px)": null,
										"Stretch": 0.43472046215314303
									},
									{
										"Fixed Size (px)": null,
										"Stretch": 0.7581243639166672
									}
								],
								"children": [
									{
										"properties": {
											"horizontal": false,
											"flexSize": 0.7
										},
										"typeName": 0,
										"uuid": "04a2f4d5-41f0-41b5-a774-84f79fbc7358",
										"attachedProperties": [
											{
												"Fixed Size (px)": null,
												"Stretch": 2.1016306169910757
											},
											{
												"Fixed Size (px)": null,
												"Stretch": 0.5071098752441152
											}
										],
										"children": [
											{
												"properties": {
													"flexSize": 1,
													"caption": "GenericChordPart",
													"showTitle": false
												},
												"typeName": 1,
												"uuid": "8aea74e4-c748-4707-8f02-8dbe38262b52",
												"guid": "e48dbb7b-4ebf-4893-a8d3-331b0ae6f0e5"
											},
											{
												"properties": {
													"showTitle": true,
													"caption": "Threshold"
												},
												"typeName": 1,
												"uuid": "57eeed0b-4cea-4212-b689-d769ac4389d2",
												"guid": "0ca373b6-9968-4246-a24a-88d8668893ff"
											}
										]
									},
									{
										"properties": {
											"showTitle": false,
											"caption": "PivotPart"
										},
										"typeName": 1,
										"uuid": "0fcc8fa7-50f2-4493-b864-aa7ce45aa938",
										"guid": "f1e802d8-a56c-49c8-93d3-33d74887372c"
									}
								]
							}
						]
					}
				]
			}
		]
	},
	"parts": {
		"fb2b2972-be30-4d08-8e3c-b94094e56d28": {
			"application/vnd.maven.part+json": {
				"name": "GenericSlidersPart",
				"id": "fb2b2972-be30-4d08-8e3c-b94094e56d28",
				"options": {
					"Names": {
						"type": "Global",
						"expr": "sliderNames",
						"globals": null
					},
					"values": {
						"type": "Global",
						"expr": "sliderValues",
						"globals": null
					},
					"namesandvalues": {
						"type": "Global",
						"expr": "SliderValues",
						"globals": null
					},
					"config": null
				}
			},
			"text/plain": "VisualEditorPart"
		},
		"7f869078-07bd-4af6-9041-9bc5733ea959": {
			"application/vnd.maven.part+json": {
				"name": "FancyDateRangeSliderPart",
				"id": "7f869078-07bd-4af6-9041-9bc5733ea959",
				"options": {
					"SelectedStart": {
						"type": "Global",
						"expr": "StartDate",
						"globals": null
					},
					"SelectedEnd": {
						"type": "Global",
						"expr": "EndDate",
						"globals": null
					}
				}
			},
			"text/plain": "VisualEditorPart"
		},
		"2c5e83b7-8905-4e73-b2a5-e6c40f8c24e5": {
			"application/vnd.maven.part+json": {
				"name": "SlickGrid",
				"id": "2c5e83b7-8905-4e73-b2a5-e6c40f8c24e5",
				"options": {
					"Input Table": {
						"type": "Mql",
						"expr": "/* @SliderValues,@ConfidenceLevelPct,@StartDate,@EndDate */\n    set @Data = Cache( 'Data1', Subselect( <<mql\n    set @Pnl5MipWeeklyPath = WorkerCache('pnl5_weekly', Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv'))\n    set @Pnl5MipExpPath =  WorkerCache('pnl5_exposures', Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv'))\n    set @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )\n    set @tableWithFakeDates = Cache( 'TWFD', AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 )))\n    SELECT \n        Currency,\n        [Book Value] as BookValue,\n        VectorsToSparkline( DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ), FloatVectorFromTable( Currency, @rawTable ) ) as Scenarios \n    FROM \n        ExcelCsvToTable( @Pnl5MipExpPath )\nmql\n    ) )\n    set @FilteredData1 = Cache( Rand(  ), Subselect( <<mql\n    set @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )\n    SELECT First(Currency) as Currency,\n           First(BookValue) as BookValue, \n           Sparkline(Scenarios, Date) as Scenarios\n    FROM Explode(@Data)\n    WHERE @NumDate >= @StartDate and @NumDate <= @EndDate\n    GROUP BY Currency\n    HAVING GetLevel() = 1\nmql\n    , 'Data', @Data, 'StartDate', @StartDate, 'EndDate', @EndDate ) )\n    set @FilteredData2 = Cache( Rand(  ), Subselect( <<mql\n    SELECT Currency as Currency2,\n           Scenarios as Scenarios2\n    FROM @FilteredData1\nmql\n    , 'FilteredData1', @FilteredData1 ) )\n    set @MinThreshold = 65\n    set @ExposureSelectionType = 'Use Sliders'\n    set @MinThresholdScaled = 0.65\n    set @ShowGrid = False\n    set @ShowSliders = True\n    set @RowPath = '/root/AUD'\n    set @RowName = 'AUD'\n    set @CellContents = 'AUD'\n    set @MessageType = 'SelectedCellChanged'\n    set @WeightedSchenarioTotal = SparklineSum( SparklineMultiply( @ValueUsed / BookValue, Scenarios ) )\n    set @PNLVector = Cache(IfElse( @IsTotal, 'Grand Total', First( Currency ) ), SparklineToFloatVector( SparklineSum( @WeightedSchenarioTotal ) ) )\n    set @ConfidenceLevel = @ConfidenceLevelPct\n    set @tailLength = Ceiling( Length( @PNLVector ) * ( 1 - @ConfidenceLevel ) )\n    set @SliderAdjustedValue = Weight / RootVal( Sum( Weight ) ) * RootVal( Sum( BookValue ) )\n    set @ValueUsed = @SliderAdjustedValue\n    set @IsTotal = GetLevel(  ) = 0\n    set @WeightTable = RemoveColumns( AddComputedColumn( CsvToTable( @SliderValues ), 'Currency', label, 'Weight', value ), 'RowName' )\n    def @tailScenFilter(@value) = @value = Idx( SortVector( @PNLVector ), @tailLength )\n    set @tailScenarioIndex = Cache( 'tsi', RootVal( FirstIndexWhere( @PNLVector, @tailScenFilter, 0 ) ) )\n    SELECT \n        Sum( @ValueUsed ) as [Book Value Used] format { General.ColumnWidthPixels := 104; Number.FormatString := '$###,###' } , \n        IfElse( @IsTotal, null, Sum( @ValueUsed ) / RootVal( Sum( @ValueUsed ) ) ) as [%] format { Number.FormatString := '0.00%'; General.DisplayStyle := 'ProgressBar'; General.ColumnWidthPixels := 47 } , \n        @WeightedSchenarioTotal as Scenarios format { General.ColumnWidthPixels := 149; General.DisplayStyle := 'SparkLine' } , \n        - Idx( SortVector( @PNLVector ), @tailLength ) as VaR format { Number.FormatString := '$###,###'; General.ColumnWidthPixels := 70 } , \n        Idx( @PNLVector, @tailScenarioIndex ) / RootVal( Idx( @PNLVector, @tailScenarioIndex ) ) as [VaR Contribution] format { Number.FormatString := '0.00%'; General.DisplayStyle := 'ProgressBar'; General.ColumnWidthPixels := 58 } , \n        - VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength as ETL format { General.ColumnWidthPixels := 78; Number.FormatString := '$###,###' } ,\n        - ( VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength ) / Sum( @ValueUsed ) as [ ETL %] format { General.ColumnWidthPixels := 103; Number.FormatString := '0.00%'; [Heatmap. Enable] := True; Heatmap.Center.Color := 'white'; Heatmap.Center.Value := 0.02; Heatmap.Maximum.Color := 'Red'; Heatmap.Maximum.Value := 0.3; Heatmap.Minimum.Color := 'Blue' } \n    FROM \n        FullOuterNaturalJoin( 'Currency', @FilteredData1, @WeightTable )\n    GROUP BY \n        Currency\n      WITH ROLLUP \n      NO LEAVES \n    ORDER BY \n        GetName(  )",
						"globals": [
							"SliderValues",
							"ConfidenceLevelPct",
							"StartDate",
							"EndDate"
						]
					},
					"Formatting": {
						"typeName": "String",
						"value": "{\"Path\":{\"General.ColumnWidthPixels\":84},\"Book Value Used\":{\"General.ColumnWidthPixels\":104,\"Number.FormatString\":\"$###,###\"},\"%\":{\"Number.FormatString\":\"0.00%\",\"General.DisplayStyle\":\"ProgressBar\",\"General.ColumnWidthPixels\":47},\"Scenarios\":{\"General.ColumnWidthPixels\":149,\"General.DisplayStyle\":\"SparkLine\"},\"VaR\":{\"Number.FormatString\":\"$###,###\",\"General.ColumnWidthPixels\":70},\"VaR Contribution\":{\"Number.FormatString\":\"0.00%\",\"General.DisplayStyle\":\"ProgressBar\",\"General.ColumnWidthPixels\":105},\"ETL\":{\"General.ColumnWidthPixels\":78,\"Number.FormatString\":\"$###,###\"},\" ETL %\":{\"General.ColumnWidthPixels\":103,\"Number.FormatString\":\"0.00%\",\"Heatmap. Enable\":\"True\",\"Heatmap.Center.Color\":\"white\",\"Heatmap.Center.Value\":0.02,\"Heatmap.Maximum.Color\":\"Red\",\"Heatmap.Maximum.Value\":0.3,\"Heatmap.Minimum.Color\":\"Blue\"}}"
					},
					"Show Path Column": {
						"typeName": "Boolean",
						"value": true
					}
				}
			},
			"text/plain": "VisualEditorPart"
		},
		"e48dbb7b-4ebf-4893-a8d3-331b0ae6f0e5": {
			"application/vnd.maven.part+json": {
				"name": "GenericChordPart",
				"id": "e48dbb7b-4ebf-4893-a8d3-331b0ae6f0e5",
				"options": {
					"Data Input": {
						"type": "Mql",
						"expr": "/* @StartDate,@EndDate */\nset @Data = Cache( 'Data1', Subselect( <<mql\n\tset @Pnl5MipWeeklyPath = WorkerCache('pnl5_weekly', Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv'))\n\tset @Pnl5MipExpPath =  WorkerCache('pnl5_exposures', Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv'))\n\tset @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )\n\tset @tableWithFakeDates = Cache( 'TWFD', AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 )))\n\tSELECT \n\t\t\tCurrency,\n\t\t\t[Book Value] as BookValue,\n\t\t\tVectorsToSparkline( DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ), FloatVectorFromTable( Currency, @rawTable ) ) as Scenarios \n\tFROM \n\t\t\tExcelCsvToTable( @Pnl5MipExpPath )\nmql\n\t) )\nset @FilteredData1 = Cache( Rand(  ), Subselect( <<mql\nset @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )\nSELECT First(Currency) as Currency,\n       First(BookValue) as BookValue, \n       Sparkline(Scenarios, Date) as Scenarios\nFROM Explode(@Data)\nWHERE @NumDate >= @StartDate and @NumDate <= @EndDate\nGROUP BY Currency\nHAVING GetLevel() = 1\nmql\n, 'Data', @Data , 'StartDate', @StartDate, 'EndDate', @EndDate ) )\nset @FilteredData2 = Cache( Rand(  ), Subselect( <<mql\nSELECT Currency as Currency2,\n       Scenarios as Scenarios2\nFROM @FilteredData1\nmql\n, 'FilteredData1', @FilteredData1 ) )\nset @MinThreshold = 65\nset @FilterToUse = IfElse( @ExposureSelectionType = 'Use Sliders', True, @Filter )\nset @ExposureSelectionType = 'Use Sliders'\nset @MinThresholdScaled = 0.65\nset @ShowGrid = False\nset @ShowSliders = True\nset @Filter = Coalesce( Currency, 'Grand Total' ) in ( 'AUD', 'CAD', 'CHF', 'DKK', 'EUR', 'GBP', 'ILS', 'JPY', 'NOK', 'USD' )\nset @RowPath = '/root/AUD'\nset @RowName = 'AUD'\nset @CellContents = 'AUD'\nset @MessageType = 'SelectedCellChanged'\nset @tailLength = 123\nset @PNLVector = SparklineToFloatVector( SparklineSum( Scenarios ) )\nSELECT \n\tCurrency format { General.ColumnWidthPixels := 84 } , \n\tCurrency2 format { General.ColumnWidthPixels := 74 } , \n\tVectorCorrelation( SparklineToFloatVector( Scenarios ), SparklineToFloatVector( Scenarios2 ) ) as Correlation format { [Heatmap. Enable] := True; Number.FormatString := '#.00'; General.ColumnWidthPixels := 118 } \nFROM \n\tCrossJoin( @FilteredData1, @FilteredData2 )",
						"globals": [
							"StartDate",
							"EndDate"
						]
					},
					"Threshold": {
						"type": "Global",
						"expr": "Threshold",
						"globals": null
					}
				}
			},
			"text/plain": "VisualEditorPart"
		},
		"fa6f19c4-191f-4c2a-ade4-50af79acd98e": {
			"application/vnd.maven.part+json": {
				"name": "SliderPart",
				"id": "fa6f19c4-191f-4c2a-ade4-50af79acd98e",
				"options": {
					"Value": {
						"type": "Global",
						"expr": "ConfidenceLevelPct",
						"globals": [
							"ConfidenceLevelPct"
						]
					},
					"Max": {
						"typeName": "Number",
						"value": 1
					},
					"Step": {
						"typeName": "Number",
						"value": 0.01
					}
				}
			},
			"text/plain": "VisualEditorPart"
		},
		"0ca373b6-9968-4246-a24a-88d8668893ff": {
			"application/vnd.maven.part+json": {
				"name": "SliderPart",
				"id": "0ca373b6-9968-4246-a24a-88d8668893ff",
				"options": {
					"Value": {
						"type": "Global",
						"expr": "Threshold",
						"globals": [
							"Threshold"
						]
					},
					"Max": {
						"typeName": "Number",
						"value": 1
					},
					"Step": {
						"typeName": "Number",
						"value": 0.01
					}
				}
			},
			"text/plain": "VisualEditorPart"
		},
		"f1e802d8-a56c-49c8-93d3-33d74887372c": {
			"application/vnd.maven.part+json": {
				"name": "PivotPart",
				"id": "f1e802d8-a56c-49c8-93d3-33d74887372c",
				"options": {
					"Input Table": {
						"type": "Mql",
						"expr": "/* @StartDate,@EndDate */\nset @Data = Cache( 'Data1', Subselect( <<mql\n\tset @Pnl5MipWeeklyPath = WorkerCache('pnl5_weekly', Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv'))\n\tset @Pnl5MipExpPath =  WorkerCache('pnl5_exposures', Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv'))\n\tset @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )\n\tset @tableWithFakeDates = Cache( 'TWFD', AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 )))\n\tSELECT \n\t\t\tCurrency,\n\t\t\t[Book Value] as BookValue,\n\t\t\tVectorsToSparkline( DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ), FloatVectorFromTable( Currency, @rawTable ) ) as Scenarios \n\tFROM \n\t\t\tExcelCsvToTable( @Pnl5MipExpPath )\nmql\n\t) )\nset @FilteredData1 = Cache( Rand(  ), Subselect( <<mql\nset @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )\nSELECT First(Currency) as Currency,\n       First(BookValue) as BookValue, \n       Sparkline(Scenarios, Date) as Scenarios\nFROM Explode(@Data)\nWHERE @NumDate >= @StartDate and @NumDate <= @EndDate\nGROUP BY Currency\nHAVING GetLevel() = 1\nmql\n, 'Data', @Data , 'StartDate', @StartDate, 'EndDate', @EndDate ) )\nset @FilteredData2 = Cache( Rand(  ), Subselect( <<mql\nSELECT Currency as Currency2,\n       Scenarios as Scenarios2\nFROM @FilteredData1\nmql\n, 'FilteredData1', @FilteredData1 ) )\nset @MinThreshold = 65\nset @FilterToUse = IfElse( @ExposureSelectionType = 'Use Sliders', True, @Filter )\nset @ExposureSelectionType = 'Use Sliders'\nset @MinThresholdScaled = 0.65\nset @ShowGrid = False\nset @ShowSliders = True\nset @Filter = Coalesce( Currency, 'Grand Total' ) in ( 'AUD', 'CAD', 'CHF', 'DKK', 'EUR', 'GBP', 'ILS', 'JPY', 'NOK', 'USD' )\nset @RowPath = '/root/AUD'\nset @RowName = 'AUD'\nset @CellContents = 'AUD'\nset @MessageType = 'SelectedCellChanged'\nset @tailLength = 123\nset @PNLVector = SparklineToFloatVector( SparklineSum( Scenarios ) )\nSELECT \n\tCurrency format { General.ColumnWidthPixels := 84 } , \n\tCurrency2 format { General.ColumnWidthPixels := 74 } , \n\tVectorCorrelation( SparklineToFloatVector( Scenarios ), SparklineToFloatVector( Scenarios2 ) ) as Correlation format { [Heatmap. Enable] := True; Number.FormatString := '#.00'; General.ColumnWidthPixels := 118 } \nFROM \n\tCrossJoin( @FilteredData1, @FilteredData2 )",
						"globals": [
							"StartDate",
							"EndDate"
						]
					},
					"Config": {
						"typeName": "String",
						"value": "{\"class\":\"p-Widget\",\"plugin\":\"d3_heatmap\",\"row-pivots\":\"[\\\"Currency\\\"]\",\"column-pivots\":\"[\\\"Currency2\\\"]\",\"filters\":\"[]\",\"sort\":\"[]\",\"style\":\"position: absolute; z-index: 0; top: 0px; left: 0px; width: 100%; height: 100%;\",\"view\":\"d3_heatmap\",\"columns\":\"[\\\"Correlation\\\"]\",\"aggregates\":\"{\\\"Currency\\\":\\\"distinct count\\\",\\\"Currency2\\\":\\\"distinct count\\\",\\\"Correlation\\\":\\\"avg\\\"}\",\"render_time\":\"148.1449999846518\",\"settings\":\"true\",\"updating\":\"true\",\"plugin_config\":{}}"
					}
				}
			},
			"text/plain": "VisualEditorPart"
		}
	},
	"metadata": {},
	"globals": [
		{
			"name": "ConfidenceLevelPct",
			"type": "Number",
			"value": 0.64
		},
		{
			"name": "StartDate",
			"type": "Number",
			"value": 19980119
		},
		{
			"name": "EndDate",
			"type": "Number",
			"value": 20090714
		},
		{
			"name": "Threshold",
			"type": "Number",
			"value": 0.7
		},
		{
			"name": "sliderNames",
			"type": "Array",
			"value": [
				{
					"typeName": "String",
					"value": "AUD"
				},
				{
					"typeName": "String",
					"value": "CAD"
				},
				{
					"typeName": "String",
					"value": "CHF"
				},
				{
					"typeName": "String",
					"value": "DKK"
				},
				{
					"typeName": "String",
					"value": "EUR"
				},
				{
					"typeName": "String",
					"value": "GBP"
				},
				{
					"typeName": "String",
					"value": "HKD"
				},
				{
					"typeName": "String",
					"value": "ILS"
				},
				{
					"typeName": "String",
					"value": "JPY"
				},
				{
					"typeName": "String",
					"value": "NOK"
				},
				{
					"typeName": "String",
					"value": "NZD"
				},
				{
					"typeName": "String",
					"value": "SEK"
				},
				{
					"typeName": "String",
					"value": "SGD"
				},
				{
					"typeName": "String",
					"value": "USD"
				}
			]
		},
		{
			"name": "sliderValues",
			"type": "Array",
			"value": [
				{
					"typeName": "Number",
					"value": 0.42
				},
				{
					"typeName": "Number",
					"value": 0.03
				},
				{
					"typeName": "Number",
					"value": 0.04
				},
				{
					"typeName": "Number",
					"value": 0.11
				},
				{
					"typeName": "Number",
					"value": 0.11
				},
				{
					"typeName": "Number",
					"value": 0.1
				},
				{
					"typeName": "Number",
					"value": 0.01
				},
				{
					"typeName": "Number",
					"value": 0
				},
				{
					"typeName": "Number",
					"value": 0.43
				},
				{
					"typeName": "Number",
					"value": 0.23
				},
				{
					"typeName": "Number",
					"value": 0
				},
				{
					"typeName": "Number",
					"value": 0.21
				},
				{
					"typeName": "Number",
					"value": 0.38
				},
				{
					"typeName": "Number",
					"value": 0.12
				}
			]
		},
		{
			"name": "SliderValues",
			"type": "String",
			"value": "value,label\n0.42,AUD\n0.03,CAD\n0.04,CHF\n0.11,DKK\n0.11,EUR\n0.1,GBP\n0.01,HKD\n0,ILS\n0.43,JPY\n0.23,NOK\n0,NZD\n0.21,SEK\n0.38,SGD\n0.12,USD\n"
		}
	],
	"localParts": {
		"GenericSlidersPart": {
			"typeName": "Part",
			"id": "GenericSlidersPart",
			"name": "GenericSlidersPart",
			"path": "/parts/GenericSlidersPart.part",
			"lastModified": "2019-08-05T20:12:09.687Z",
			"data": {
				"htmlText": "<div id=\"container\">\n</div>\n<br>\n<button class=\"btn\">Reset</button>\n",
				"cssText": "#container {\n    display: grid;\n    grid-template-columns: 100px minmax(150px, 80%) 100px;\n    align-items: center;\n    grid-column-gap: 10px;\n    grid-row-gap: 10px;\n    font-family: \"Verdena\", Sans-serif;\n    font-size:16pt;\n}\ninput[type=range] {\n  -webkit-appearance: none;\n  width: 100%;\n  margin: 4px 0;\n}\ninput[type=range]:focus {\n  outline: none;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 12px;\n  cursor: pointer;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n  background: #555555;\n  border-radius: 3.3px;\n  border: 0px solid #010101;\n}\ninput[type=range]::-webkit-slider-thumb {\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n  border: 1px solid #dddddd;\n  height: 20px;\n  width: 28px;\n  border-radius: 4px;\n  background: #eeeeee;\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -4px;\n}\ninput[type=range]:focus::-webkit-slider-runnable-track {\n  background: #5a5a5a;\n}\ninput[type=range]::-moz-range-track {\n  width: 100%;\n  height: 12px;\n  cursor: pointer;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n  background: #555555;\n  border-radius: 3.3px;\n  border: 0px solid #010101;\n}\ninput[type=range]::-moz-range-thumb {\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n  border: 1px solid #dddddd;\n  height: 20px;\n  width: 28px;\n  border-radius: 4px;\n  background: #eeeeee;\n  cursor: pointer;\n}\ninput[type=range]::-ms-track {\n  width: 100%;\n  height: 12px;\n  cursor: pointer;\n  background: transparent;\n  border-color: transparent;\n  color: transparent;\n}\ninput[type=range]::-ms-fill-lower {\n  background: #505050;\n  border: 0px solid #010101;\n  border-radius: 6.6px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n}\ninput[type=range]::-ms-fill-upper {\n  background: #555555;\n  border: 0px solid #010101;\n  border-radius: 6.6px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n}\ninput[type=range]::-ms-thumb {\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n  border: 1px solid #dddddd;\n  height: 20px;\n  width: 28px;\n  border-radius: 4px;\n  background: #eeeeee;\n  cursor: pointer;\n  height: 12px;\n}\ninput[type=range]:focus::-ms-fill-lower {\n  background: #555555;\n}\ninput[type=range]:focus::-ms-fill-upper {\n  background: #5a5a5a;\n}\n\n\n.btn {\n  background: #ebebeb;\n  background-image: -webkit-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: -moz-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: -ms-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: -o-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: linear-gradient(to bottom, #ebebeb, #cfcfcf);\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0px;\n  font-family: Arial;\n  color: #424242;\n  font-size: 14px;\n  padding: 6px 25px 8px 25px;\n  border: solid #b3b3b3 1px;\n  text-decoration: none;\n}\n\n.btn:hover {\n  border: solid #5e5e5e 1px;\n}\n\n.btn:active {\n  background: #e3e3e3;\n  background-image: -webkit-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: -moz-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: -ms-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: -o-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: linear-gradient(to bottom, #e3e3e3, #f7f7f7);\n  text-decoration: none;\n}",
				"jsText": "let sliderConfig = {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    defaultVal: 0.5,\n    showReset: true\n}\nfunction formatOutputValues(value){\n    return (+value).toFixed(2);\n}\nthis.isMulti = false;\nthis.render = function (args) { \n    let names = args[0];\n    let values = args[1];\n    let config = (args.length > 3) ? (args[3] || sliderConfig) : sliderConfig;\n    \n    if (!names) {\n        names = [\"slider 1\", \"slider 2\"];\n        values = [.2, .4];\n    }\n\n    this.isMulti = Array.isArray(names);\n    if (!this.isMulti) {\n        names = [names];\n        values = [values];\n    }\n    \n    let container = document.getElementById(\"container\");\n    container.innerHTML = \"\";\n    for(let i = 0; i < names.length; i++) {\n        let sliderTemplate = `\n        <div>${names[i]}:</div>\n            <input class=\"slider\" type=\"range\"\n                min=\"${config.min}\"\n                max=\"${config.max}\"\n                step=\"${config.step}\"\n                value=\"${values[i]}\">\n        <data class=\"output\"> ${formatOutputValues(values[i])} </data>\n        `\n        container.insertAdjacentHTML(\"beforeend\", sliderTemplate);\n    }\n    let sliders = document.getElementsByClassName(\"slider\");\n    let outputs = document.getElementsByClassName(\"output\");\n    \n    for(let i = 0; i < sliders.length; i++) {\n        let slider = sliders[i];\n        let output = outputs[i];\n        let setValue = (setContext) => {\n            let val = slider.value;\n            let values = Array.from(sliders).map(s => +s.value);\n            output.innerText = formatOutputValues(val);\n            //hardcoded for now\n            let csvOutput = \"value,label\\n\";\n            for (let j = 0; j < names.length; j++) {\n                csvOutput += values[j] + \",\" + names[j] + \"\\n\";\n            }\n            if (setContext === true) {\n                this.context.set(\"values\", this.isMulti ? values : values[0]);\n                this.context.set(\"namesandvalues\", csvOutput);\n            }\n        };\n        slider.addEventListener(\"mousedown\", () => {\n            setValue();\n            slider.onmousemove = setValue;\n        });\n        slider.addEventListener(\"mouseup\", () => {\n            setValue(true);\n            slider.onmousemove = null;\n        });\n    }\n    \n    let button = document.querySelector(\"button\");\n    button.addEventListener(\"click\", () => {\n        for(let i = 0; i < sliders.length; i++) {\n            let slider = sliders[i];\n            let output = outputs[i];\n            slider.value = config.defaultVal;\n            output.innerText = formatOutputValues(config.defaultVal);\n        }\n        let values = Array(sliders.length).fill(config.defaultVal);\n        this.context.set(\"values\", this.isMulti ? values : values[0]);\n    });\n    button.style.display = config.showReset ? \"\" : \"none\";\n};\n\nthis.initialize = function () {\n    return Promise.resolve();\n}"
			},
			"functionType": "UserDefinedEvalPart",
			"arguments": [
				{
					"typeAnnotation": "Any",
					"name": "Names",
					"metadata": null,
					"defaultValue": {
						"typeName": "Any",
						"value": ""
					}
				},
				{
					"typeAnnotation": "Any",
					"name": "values",
					"metadata": null,
					"defaultValue": {
						"typeName": "Any",
						"value": ""
					}
				},
				{
					"typeAnnotation": "Any",
					"name": "namesandvalues",
					"metadata": null,
					"defaultValue": null
				},
				{
					"name": "config",
					"typeAnnotation": "Any",
					"defaultValue": null,
					"metadata": null
				}
			]
		},
		"FancyDateRangeSliderPart": {
			"typeName": "Part",
			"id": "FancyDateRangeSliderPart",
			"name": "FancyDateRangeSliderPart",
			"path": "/parts/FancyDateRangeSliderPart.part",
			"lastModified": "2019-08-05T20:12:09.687Z",
			"data": {
				"htmlText": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRangeSliderMouseTouch.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRangeSliderDraggable.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRangeSliderBar.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRangeSliderHandle.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRangeSliderLabel.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRangeSlider.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQDateRangeSliderHandle.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQDateRangeSlider.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/jQRuler.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jQRangeSlider/5.7.2/css/iThing.css\" />\n\n<div id=\"slider\"></div>",
				"jsText": "this.render = function(args) {\n    let rangeStart = args[0],\n        rangeEnd = args[1],\n        selectedStart = convertMavenDate(args[2]),\n        selectedEnd = convertMavenDate(args[3]);\n        \n    $(\"#slider\").dateRangeSlider({\n        symmetricPositionning: true,\n        range: { min: 0 },\n        bounds: {\n            min: new Date(rangeStart),\n            max: new Date(rangeEnd)\n        },\n        defaultValues:{\n            min: selectedStart,\n            max: selectedEnd\n        } \n    });\n} \nthis.initialize = function() {\n    $(\"#slider\").bind(\"valuesChanged\", sliderValsChanged.bind(this));\n\n    return Promise.resolve();\n}\n\nfunction convertMavenDate(dateNum) {\n    let strDate = dateNum.toString();\n    return new Date(strDate.substr(4, 2) + \"-\" + strDate.substr(6, 2) + \"-\" + strDate.substr(0, 4));\n}\n\nfunction contextTimeStyle(_date){\n    return _date.getFullYear() * 10000 + _date.getMonth() * 100 + 100 + _date.getDate();\n}\n\nfunction sliderValsChanged(e, data){\n    this.context.set(\"SelectedStart\", contextTimeStyle(data.values.min));\n    this.context.set(\"SelectedEnd\", contextTimeStyle(data.values.max));\n}",
				"cssText": "body {\n    padding: 15px;\n    overflow: hidden;\n}\ndiv {\n    font-family: \"Arial\", sans-serif;\n} "
			},
			"functionType": "UserDefinedEvalPart",
			"arguments": [
				{
					"typeAnnotation": "Date",
					"name": "RangeStart",
					"metadata": null,
					"defaultValue": {
						"typeName": "Date",
						"value": 821336400000
					}
				},
				{
					"typeAnnotation": "Date",
					"name": "RangeEnd",
					"metadata": null,
					"defaultValue": {
						"typeName": "Date",
						"value": 1339473600000
					}
				},
				{
					"typeAnnotation": "Number",
					"name": "SelectedStart",
					"metadata": null,
					"defaultValue": {
						"typeName": "Number",
						"value": {
							"val": 19981020,
							"boxed": false
						}
					}
				},
				{
					"typeAnnotation": "Number",
					"name": "SelectedEnd",
					"metadata": null,
					"defaultValue": {
						"typeName": "Number",
						"value": {
							"val": 20110423,
							"boxed": false
						}
					}
				}
			]
		},
		"GenericChordPart": {
			"typeName": "Part",
			"id": "GenericChordPart",
			"name": "GenericChordPart",
			"path": "/parts/GenericChordPart.part",
			"lastModified": "2019-08-05T20:12:09.687Z",
			"data": {
				"htmlText": "<script src=\"//d3js.org/d3.v3.min.js\"></script>\r\n<div id=\"container\"></div>",
				"cssText": "body {\r\n  font: 10px sans-serif;\r\n  overflow: hidden; \r\n  margin: 0;\r\n}\r\n\r\n.chord {\r\n  fill-opacity: .67;\r\n}\r\n\r\n.center {\r\n    display: block;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    min-width: 10%;\r\n}\r\n\r\ntext {\r\n    cursor: pointer;\r\n}\r\n\r\npath {\r\n    cursor: pointer;\r\n}",
				"jsText": "let outerRadius, innerRadius, chord, arc, svg;\nthis.render = function(args) {\n    // hack sometimes args are undefined\n    if (!args[0])\n        return;\n\n    let rows = args[0].Rows,\n      cols = args[0].columnNames,\n      threshold = args[1],\n      nameByIndex = d3.map(),\n      indexByName = d3.map(),\n      matrix = [],\n      n = 0;\n    \n\n\n    \n    // Compute a unique index for each package name.\n    rows.forEach(function(d) {\n    if (!indexByName.has(d = d[cols[0]])) {\n      nameByIndex.set(n, d);\n      indexByName.set(d, n++);\n    }\n    });\n    \n    // Construct a square matrix counting package imports.\n    rows.forEach(function(d) {\n    var source = indexByName.get(d[cols[0]]),\n        row = matrix[source];\n    if (!row) {\n        row = matrix[source] = [];\n        for (var i = -1; ++i < n;) row[i] = 0;\n    }\n    var val = d[cols[2]];\n    if (source !== indexByName.get(d[cols[1]]))\n        row[indexByName.get(d[cols[1]])] = val > threshold ? val : 0;\n    });\n\n    outerRadius = Math.min(window.innerWidth, window.innerHeight) / 2;\n    innerRadius = outerRadius - 80;\n    \n    //fill = d3.scale.category20c();\n    fill = () => {return \"#777\"}\n    fill2 = () => {return \"#68f\"}\n    \n    chord = d3.layout.chord()\n    .padding(.25)\n    .sortSubgroups(d3.descending)\n    .sortChords(d3.descending);\n\n    arc = d3.svg.arc()\n    .innerRadius(innerRadius)\n    .outerRadius(innerRadius + 2);\n    \n    svg = d3.select(\"#container\").html(\"\")\n    .append(\"svg\")\n        .attr(\"class\", \"center\")\n        .attr(\"width\", outerRadius * 2)\n        .attr(\"height\", outerRadius * 2)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + outerRadius + \",\" + outerRadius + \")\");\n        \n    chord.matrix(matrix);\n    var g = svg.selectAll(\".group\")\n      .data(chord.groups)\n    .enter().append(\"g\")\n      .attr(\"class\", \"group\");\n    \n    g.append(\"path\")\n      .style(\"fill\", function(d) { return fill(d.index); })\n      .style(\"stroke\", function(d) { return fill(d.index); })\n      .attr(\"d\", arc);\n\n    let tooltip;\n    \n    g.append(\"text\")\n      .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })\n      .attr(\"dy\", \".35em\")\n      .attr(\"transform\", function(d) {\n        return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\"\n            + \"translate(\" + (innerRadius + 26) + \")\"\n            + (d.angle > Math.PI ? \"rotate(180)\" : \"\");\n      })\n      .on(\"mouseover\", (d, i) => {\n            fade(.1, \"group\")(d, i);\n            let sName = nameByIndex.get(d.index);\n            let selectedRows = rows.filter(r => r[cols[0]] === sName);\n            let targetNames = selectedRows.map(sR => sR[cols[1]]);\n            let targetValues = selectedRows.map(sR => sR[cols[2]]);\n            \n            let selectedObj = {};\n            targetNames.forEach((tN, i) => selectedObj[tN] = targetValues[i]);\n            const hover = `<table>\n                ${selectedRows.map((row, i) => {\n                    return `<tr>\n                        <td>${row[cols[0]]}</td>\n                        <td>${row[cols[1]]}</td>\n                        <td>${row[cols[2]]}</td>\n                    </tr>`;\n                })}\n            </table>`;\n            tooltip = this.context.openHtmlHover(hover, {\n                mode: \"tooltip\",\n                height: 300,\n                width: 200,\n                x: 0,\n                y: 0\n            });\n      })\n      .on(\"mouseout\", (d, i) => {\n          fade(1, \"group\")(d, i);\n          this.context.hover.closeHover(tooltip);\n      })\n      .style(\"text-anchor\", function(d) { return d.angle > Math.PI ? \"end\" : null; })\n      .text(function(d) { return nameByIndex.get(d.index); });\n    \n    let rowTooltip;\n\n    svg.selectAll(\".chord\")\n      .data(chord.chords)\n    .enter().append(\"path\")\n      .attr(\"class\", \"chord\")\n      .on(\"mouseover\", (d, i) => {\n            fade(.1, \"single\")(d, i);\n            let sName = nameByIndex.get(d.source.index);\n            let tName = nameByIndex.get(d.target.index);\n            let selectedRow = rows.find(r => r[cols[0]] === sName && r[cols[1]] === tName);\n            \n            const hover = `<table>\n                <thead>\n                    <tr>\n                        <th>Column</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                ${cols.map(i => {\n                    return `<tr>\n                        <td>${i}</td>\n                        <td>${selectedRow[i]}</td>\n                    </tr>`;\n                })}\n            </table>`;\n            rowTooltip = this.context.openHtmlHover(hover, {\n                mode: \"tooltip\",\n                height: 150,\n                width: 200,\n                x: 0,\n                y: 0\n            });\n      })\n      .on(\"mouseout\", (d, i) => {\n            fade(1, \"single\")(d, i);\n            this.context.hover.closeHover(rowTooltip);\n      })\n      .style(\"stroke\", function(d) { return d3.rgb(fill2(d.source.index)).darker(); })\n      .style(\"fill\", function(d) { return fill2(d.source.index); })\n      .attr(\"d\", d3.svg.chord().radius(innerRadius));\n\n}\n\n\nfunction fade(opacity, singleOrGroup) {\n    return function(g, i) {\n        svg.selectAll(\".chord\")\n                .filter(function(d) {\n                    if (singleOrGroup === \"single\") {\n                        return d.source.index != g.source.index || d.target.index != g.target.index;\n                    } else if (singleOrGroup === \"group\") {\n                        return d.source.index != i && d.target.index != i;\n                    }\n                })\n                .transition()\n                .style(\"opacity\", opacity);\n    };\n}\nthis.initialize = function() {\n\treturn Promise.resolve();\n}\n "
			},
			"functionType": "UserDefinedEvalPart",
			"arguments": [
				{
					"typeAnnotation": "Table",
					"name": "Data Input",
					"metadata": null,
					"defaultValue": {
						"typeName": "Table",
						"value": {
							"rows": [],
							"cols": [],
							"types": []
						}
					}
				},
				{
					"typeAnnotation": "Number",
					"name": "Threshold",
					"metadata": null,
					"defaultValue": {
						"typeName": "Number",
						"value": {
							"val": 0.5,
							"boxed": false
						}
					}
				}
			]
		}
	},
	"init": [
		""
	]
}