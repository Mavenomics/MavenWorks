{"typeName":"Part","id":"7849a0d7-ece5-4716-b0a4-d608b2c6bf84","name":"untitled.part","path":"parts/untitled.part","lastModified":"2018-10-04T22:50:45.336Z","data":{"htmlText":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.1.0/pivot.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.1.0/pivot.min.css\">\n<div id=\"pvtUi\"></div>","jsText":"this.initialize = function() {\n}\nthis.configPreset = Object.freeze({});\nthis.render = function(args) {\n    this.data = args[0];\n    this.config = args[1];\n    \n    if (!this.config || !this.config.rows)\n        this.config = {};\n    \n    let rows = this.data ? toObjectArray(this.data) : [];\n    let options = {\n        onRefresh: (config) => {\n            let testString = JSON.stringify(config);\n            if (testString === JSON.stringify(this.config)) {\n                return;\n            }\n            let config_copy = JSON.parse(testString);\n            if (!config_copy.aggregators)\n                return;\n            // delete some values which are functions\n            delete config_copy[\"aggregators\"];\n            delete config_copy[\"renderers\"];\n            // delete some bulky default values\n            delete config_copy[\"rendererOptions\"];\n            delete config_copy[\"localeStrings\"];\n            if (this.data) {\n                if (JSON.stringify(config_copy) === JSON.stringify(this.config)) {\n                    return;\n                }\n                \n                this.config = config_copy;\n                this.context.set(\"PivotGrid config\", config_copy);\n            }\n        }\n    };\n    \n    let pvtUi = $(\"#pvtUi\");\n    if (!this.data) {\n            pvtUi.addClass(\"is-disabled\");\n        }\n\n    pvtUi.pivotUI(\n        rows,\n        Object.assign(\n            options,\n            Object.keys(this.configPreset).length !== Object.keys({}).length ? this.configPreset : this.config\n        )\n    );\n    \n    $(\"#pvtUi\").find(\".pvtAxisContainer\").css(\"display\", args[2] ? \"\" : \"none\")\n    $(\"#pvtUi\").find(\".pvtRenderer\").parent().css(\"display\", args[2] ? \"\" : \"none\")\n    $(\"#pvtUi\").find(\".pvtVals\").css(\"display\", args[2] ? \"\" : \"none\")\n\n}\nfunction toObjectArray(table) {\n    return _.map(table.rows, (row) => _.transform(table.columnNames, (r, c, i) => {\n        r[c] = row.getValue(i);\n    }, {}));\n}","cssText":".is-disabled {\n        opacity: .5;\n        pointer-events: none;\n    }"},"functionType":"UserDefinedEvalPart","arguments":[{"name":"TableInput","typeAnnotation":"Table","defaultValue":null,"metadata":null},{"name":"PivotGrid config","typeAnnotation":"Any","defaultValue":{"typeName":"String","value":{"val":"","boxed":false}},"metadata":null},{"name":"devMode","typeAnnotation":"Boolean","defaultValue":{"typeName":"Boolean","value":{"val":false,"boxed":false}},"metadata":null}],"returnType":"Any"}