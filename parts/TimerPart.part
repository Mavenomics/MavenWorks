{"typeName":"Part","id":"e22a4c3f-2239-4e74-84be-3b6456db5232","name":"TimerPart.part","path":"/parts/TimerPart.part","lastModified":"2018-11-13T23:51:25.261Z","data":{"htmlText":"","jsText":"this.interval = 1000;\nthis.timer = null;\nthis.enabled = false;\nthis.render = function (args) {\n    let interval = args[1];\n    this.enabled = args[2];\n    \n    //Timer already running and the interval hasn't changed.\n    if (this.timer && this.interval == interval)\n        return;\n    this.interval = interval;\n\n    //Clear the previous timer\n    if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n    }\n    \n    //Create the timer\n    if (typeof interval == \"number\" && interval > 0) {\n        this.timer = setInterval(() => {\n            //Todo: Clear timer when not enabled\n            if (this.enabled)\n                this.context.set(\"rand\", Math.random());\n        }, interval);\n    }\n}\n\nthis.initialize = function () {\n    return Promise.resolve();\n}","cssText":""},"functionType":"UserDefinedEvalPart","arguments":[{"name":"rand","typeAnnotation":"Number","defaultValue":null,"metadata":null},{"name":"interval","typeAnnotation":"Number","defaultValue":{"typeName":"Number","value":{"val":1000,"boxed":false}},"metadata":null},{"name":"enabled","typeAnnotation":"Boolean","defaultValue":{"typeName":"Boolean","value":{"val":false,"boxed":false}},"metadata":null}],"returnType":"Any"}