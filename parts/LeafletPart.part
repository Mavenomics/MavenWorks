{
	"typeName": "Part",
	"id": "83c411e8-61c6-c207-c5b1-f8653b8b0516",
	"name": "LeafletPart",
	"path": "/Parts/LeafletPart",
	"data": {
		"htmlText": "<script src=\"../node_modules/jquery/dist/jquery.min.js\"></script>\n<script src=\"../node_modules/systemjs/dist/system.src.js\"></script>\n<script src=\"../node_modules/es6-shim/es6-shim.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.2/dist/leaflet.css\" />\n<link rel=\"stylesheet\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css\">\n\n<div id=\"mapid\"></div>",
		"cssText": "#mapid {\n    position: absolute !important;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0px;\n}",
		"jsText": "this.render = function (args) {\n\tif(!window.initialized) {\n\t    InitChart.apply(this, args);\n\t    window.initialized = true;\n\t} else {\n\t    AdjustMap.apply(this, args);\n\t}\n}\n\n\nfunction AdjustMap(data, type, col_color, col_icon, map_lat, map_long, \n                   map_tileserver, col_lat, col_long, map_zoom) {\n    window.mymap.setView([map_lat, map_long], map_zoom);\n    \n    if (!data) {\n        return;\n    }\n    \n    if (type === \"marker\") {\n        if (!!window.markerGroup) {\n            window.markerGroup.removeFrom(window.mymap);\n        }\n        window.markerGroup = new L.FeatureGroup().addTo(window.mymap);\n        let icons = GetUniqueIcons(data, col_icon, col_color);\n        let fallback = new L.Icon.Default();\n        data.rows.map(row => {\n            let icon_inst = !!icons ? icons[row.getValue(color_icon)][row.getValue(col_icon)] : fallback;\n            let lat = row.getValue(col_lat);\n            let long = row.getValue(col_long);\n            L.marker([lat, long], {icon: icon_inst})\n                .addTo(window.markerGroup)\n                .bindPopup(row.name)\n                .on(\"click\", () => {\n                    this.context.set(\"Data.SelectedMarker\", row.name);\n                });\n                console.log(row.name);\n        });\n    }\n}\n\nfunction InitChart(data, type, col_color, col_icon, map_lat, map_long, \n                   map_tileserver, col_lat, col_long, map_zoom) {\n    window.mymap = L.map('mapid').setView([map_lat,map_long], map_zoom);\n    \n\tL.tileLayer(map_tileserver, {\n\t\tmaxZoom: 18,\n\t\tattribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, ' +\n\t\t\t'<a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n\t\t\t'Imagery Â© <a href=\"http://mapbox.com\">Mapbox</a>',\n\t\tid: 'mapbox.streets'\n\t}).addTo(window.mymap);\n\t\n\tAdjustMap(data, type, col_color, col_icon, map_lat, map_long, \n              map_tileserver, col_lat, col_long, map_zoom);\n\t\n\t// TODO: Add options for current zoom/center and set event handlers here\n}\n\nfunction GetUniqueIcons(data, col_icon, col_color) {\n    let iconsIndex = {};\n    \n    if (col_icon == col_color && col_icon == \"none\") {\n        return null;\n    } else console.log(col_icon, col_color, col_icon == \"none\")\n    \n    data.rows.map(row => {\n        let icon = row.getValue(col_icon);\n        let color = row.getValue(color_icon);\n        if (!iconsIndex.hasOwnProperty(color) || !iconsIndex[color][icon]) {\n            iconsIndex[color][icon] = L.AwesomeMarkers.Icon({\n                icon: icon,\n                markerColor: color\n            });\n        }\n    })\n    \n    return iconsIndex;\n}\n\nthis.initialize = function () {\n\t// Import d3\n\treturn Promise.all([\n\t\tSystem.import(\"https://unpkg.com/leaflet@1.0.2/dist/leaflet.js\"),\n\t\tnew Promise(resolve => {\n\t        $(document).ready(() => {\n\t\t        resolve();\n\t        });\n\t    })\n\t]).then((modules) => {\n\t    return System.import(\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js\")\n\t});\n}"
	},
	"functionType": "UserDefinedEvalPart",
	"arguments": [
		{
			"typeAnnotation": "Any",
			"name": "Data Input",
			"metadata": null,
			"defaultValue": null
		},
		{
			"typeAnnotation": "String",
			"name": "Display Type",
			"metadata": [
				"line",
				"marker"
			],
			"defaultValue": {
				"typeName": "String",
				"value": {
					"val": "marker",
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "String",
			"name": "Color column",
			"metadata": null,
			"defaultValue": {
				"typeName": "String",
				"value": {
					"val": "none",
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "String",
			"name": "Marker.Icon col",
			"metadata": null,
			"defaultValue": {
				"typeName": "String",
				"value": {
					"val": "none",
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "Number",
			"name": "Map.InitLat",
			"metadata": null,
			"defaultValue": {
				"typeName": "Number",
				"value": {
					"val": 42.361,
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "Number",
			"name": "Map.InitLong",
			"metadata": null,
			"defaultValue": {
				"typeName": "Number",
				"value": {
					"val": -71.065,
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "String",
			"name": "Map.TileServerString",
			"metadata": null,
			"defaultValue": {
				"typeName": "String",
				"value": {
					"val": "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "String",
			"name": "Data.LatCol",
			"metadata": null,
			"defaultValue": {
				"typeName": "String",
				"value": {
					"val": "lat",
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "String",
			"name": "Data.LongCol",
			"metadata": null,
			"defaultValue": {
				"typeName": "String",
				"value": {
					"val": "long",
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "Number",
			"name": "Map.InitZoom",
			"metadata": {
				"min": 1,
				"max": 18,
				"step": 1
			},
			"defaultValue": {
				"typeName": "Number",
				"value": {
					"val": 14,
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "Any",
			"name": "Data.SelectedMarker",
			"metadata": null,
			"defaultValue": null
		}
	],
	"returnType": "Any"
}