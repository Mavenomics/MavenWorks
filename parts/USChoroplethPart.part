{"typeName":"Part","id":"768866e9-074d-8bab-0e64-993fa2a4c8f9","name":"US Choropleth Part","path":"/Parts/US Choropleth Part","lastModified":"2018-09-19T01:47:58.522Z","data":{"htmlText":"<script src=\"https://unpkg.com/jquery/dist/jquery.min.js\"></script>\n<script src=\"https://unpkg.com/systemjs/dist/system.src.js\"></script>\n<script src=\"https://unpkg.com/es6-shim/es6-shim.min.js\"></script>\n","cssText":"body {\n    background: #acf;\n    overflow: hidden;\n    padding: 10px;\n    transform-origin: 0 0;\n}\npath.state  {\n    fill: #ccc;\n}\npath.state-border   {\n    fill: none;\n    stroke: #fff;\n    stroke-width: 1px;\n}\n ","jsText":"this.render = function (args) {\n\tlet input = args[0];\n\tlet inputDataCol = args[1];\n\t// if null, use row name\n\tlet stateReference = args[2];\n\tlet dataFeatures = args[3];\n\tlet heatmapLow = args[4];\n\tlet heatmapHigh = args[5];\n\n\tlet us = window.shapeData;\n\tlet inputDataMap = new Map();\n\n\tif (!!input) {\n\t    input.rows.map(row => {\n    \t    let feature = \"\"+(!!stateReference ? row.getValue(stateReference) : row.name)\n    \t\tinputDataMap.set(feature, row.getValue(inputDataCol))\n    \t});\n\t}\n\t\n\tlet heatmapScale = d3.scaleLinear()\n\t\t.domain(d3.extent(Array.from(inputDataMap.values())))\n\t\t.range([heatmapLow, heatmapHigh]);\n\n\t$('body svg').empty().remove();\n\tlet svg = d3.select(\"body\").append(\"svg\")\n\t\t.style(\"width\", \"960px\")\n\t\t.style(\"height\", \"600px\")\n\t\t.style(\"transform-origin\", \"0 0\");\n\n\tlet mapScale = Math.min((window.innerWidth - 20) / 960,\n\t\t\t(window.innerHeight - 20) / 600);\n\tsvg.style(\"transform\", `scale(${mapScale})`);\n\n\twindow.addEventListener(\"resize\", function () {\n\t\tmapScale = Math.min((window.innerWidth - 20) / 960,\n\t\t\t\t(window.innerHeight - 20) / 600);\n\t\tsvg.style(\"transform\", `scale(${mapScale})`);\n\t});\n\n\tlet path = d3.geoPath();\n\n\tsvg.append(\"g\")\n\t.classed(\"state\", true)\n\t.selectAll(\"path\")\n\t.data(topojson.feature(us, us.objects[dataFeatures]).features)\n\t.enter()\n\t.append(\"path\")\n\t.attr(\"d\", path)\n\t.attr(\"fill\", (d) => heatmapScale(inputDataMap.get(d.id)));\n\n\tsvg.append(\"path\")\n\t.attr(\"class\", \"state-border\")\n\t.attr(\"d\", path(topojson.mesh(us, us.objects.states, (a, b) => a !== b)));\n\tsvg.append(\"path\")\n\t.attr(\"class\", \"state-border\")\n\t.attr(\"d\", path(topojson.mesh(us, us.objects.nation)));\n};\n\nthis.initialize = function () {\n\treturn Promise.all([\n\t\t\tSystem.import(\"https://d3js.org/d3.v4.min.js\"),\n\t\t\tSystem.import(\"https://unpkg.com/topojson-client@3\")\n\t\t]).then((modules) => {\n\t\tif (!window.d3) {\n\t\t\twindow.d3 = modules[0];\n\t\t}\n\t\tif (!window.topojson) {\n\t\t\twindow.topojson = modules[1];\n\t\t}\n\t\t\n\t\tif (!window.shapeData) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tlet req = new XMLHttpRequest();\n\t\t\t\treq.onload = function () {\n\t\t\t\t\twindow.shapeData = JSON.parse(this.responseText);\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t\treq.open(\"GET\", \"https://unpkg.com/us-atlas@1/us/10m.json\");\n\t\t\t\treq.send();\n\t\t\t});\n\t\t}\n\t});\n}\n"},"functionType":"UserDefinedEvalPart","arguments":[{"typeAnnotation":"Any","name":"Choropleth Data","metadata":null,"defaultValue":null},{"typeAnnotation":"String","name":"Input Column","metadata":null,"defaultValue":{"typeName":"String","value":{"val":"data","boxed":false}}},{"typeAnnotation":"String","name":"Feature Column","metadata":null},{"typeAnnotation":"String","name":"Feature Level","metadata":["states","counties"],"defaultValue":{"typeName":"String","value":{"val":"states","boxed":false}}},{"typeAnnotation":"String","name":"Heatmap.low","metadata":null,"defaultValue":{"typeName":"String","value":{"val":"red","boxed":false}}},{"name":"Heatmap.high","typeAnnotation":"String","defaultValue":{"typeName":"String","value":{"val":"blue","boxed":false}},"metadata":null}],"returnType":"Any"}