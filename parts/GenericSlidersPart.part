{"typeName":"Part","id":"ae168c89-cbea-717e-36fe-5d87718b4f94","name":"Sliders - Generic","path":"/Parts/Sliders - Generic","lastModified":"2018-09-24T21:23:29.122Z","data":{"htmlText":"<div id=\"container\">\n</div>\n<br>\n<button class=\"btn\">Reset</button>\n","cssText":"#container {\n    display: grid;\n    grid-template-columns: 100px minmax(150px, 80%) 100px;\n    align-items: center;\n    grid-column-gap: 10px;\n    grid-row-gap: 10px;\n    font-family: \"Verdena\", Sans-serif;\n    font-size:16pt;\n}\ninput[type=range] {\n  -webkit-appearance: none;\n  width: 100%;\n  margin: 4px 0;\n}\ninput[type=range]:focus {\n  outline: none;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 12px;\n  cursor: pointer;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n  background: #555555;\n  border-radius: 3.3px;\n  border: 0px solid #010101;\n}\ninput[type=range]::-webkit-slider-thumb {\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n  border: 1px solid #dddddd;\n  height: 20px;\n  width: 28px;\n  border-radius: 4px;\n  background: #eeeeee;\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -4px;\n}\ninput[type=range]:focus::-webkit-slider-runnable-track {\n  background: #5a5a5a;\n}\ninput[type=range]::-moz-range-track {\n  width: 100%;\n  height: 12px;\n  cursor: pointer;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n  background: #555555;\n  border-radius: 3.3px;\n  border: 0px solid #010101;\n}\ninput[type=range]::-moz-range-thumb {\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n  border: 1px solid #dddddd;\n  height: 20px;\n  width: 28px;\n  border-radius: 4px;\n  background: #eeeeee;\n  cursor: pointer;\n}\ninput[type=range]::-ms-track {\n  width: 100%;\n  height: 12px;\n  cursor: pointer;\n  background: transparent;\n  border-color: transparent;\n  color: transparent;\n}\ninput[type=range]::-ms-fill-lower {\n  background: #505050;\n  border: 0px solid #010101;\n  border-radius: 6.6px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n}\ninput[type=range]::-ms-fill-upper {\n  background: #555555;\n  border: 0px solid #010101;\n  border-radius: 6.6px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n}\ninput[type=range]::-ms-thumb {\n  box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n  border: 1px solid #dddddd;\n  height: 20px;\n  width: 28px;\n  border-radius: 4px;\n  background: #eeeeee;\n  cursor: pointer;\n  height: 12px;\n}\ninput[type=range]:focus::-ms-fill-lower {\n  background: #555555;\n}\ninput[type=range]:focus::-ms-fill-upper {\n  background: #5a5a5a;\n}\n\n\n.btn {\n  background: #ebebeb;\n  background-image: -webkit-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: -moz-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: -ms-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: -o-linear-gradient(top, #ebebeb, #cfcfcf);\n  background-image: linear-gradient(to bottom, #ebebeb, #cfcfcf);\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0px;\n  font-family: Arial;\n  color: #424242;\n  font-size: 14px;\n  padding: 6px 25px 8px 25px;\n  border: solid #b3b3b3 1px;\n  text-decoration: none;\n}\n\n.btn:hover {\n  border: solid #5e5e5e 1px;\n}\n\n.btn:active {\n  background: #e3e3e3;\n  background-image: -webkit-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: -moz-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: -ms-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: -o-linear-gradient(top, #e3e3e3, #f7f7f7);\n  background-image: linear-gradient(to bottom, #e3e3e3, #f7f7f7);\n  text-decoration: none;\n}","jsText":"let sliderConfig = {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    defaultVal: 0.5,\n    showReset: true\n}\nfunction formatOutputValues(value){\n    return (+value).toFixed(2);\n}\nthis.isMulti = false;\nthis.render = function (args) { \n    let names = args[0];\n    let values = args[1];\n    let config = (args.length > 3) ? (args[3] || sliderConfig) : sliderConfig;\n    \n    if (!names) {\n        names = [\"slider 1\", \"slider 2\"];\n        values = [.2, .4];\n    }\n\n    this.isMulti = Array.isArray(names);\n    if (!this.isMulti) {\n        names = [names];\n        values = [values];\n    }\n    \n    let container = document.getElementById(\"container\");\n    container.innerHTML = \"\";\n    for(let i = 0; i < names.length; i++) {\n        let sliderTemplate = `\n        <div>${names[i]}:</div>\n            <input class=\"slider\" type=\"range\"\n                min=\"${config.min}\"\n                max=\"${config.max}\"\n                step=\"${config.step}\"\n                value=\"${values[i]}\">\n        <data class=\"output\"> ${formatOutputValues(values[i])} </data>\n        `\n        container.insertAdjacentHTML(\"beforeend\", sliderTemplate);\n    }\n    let sliders = document.getElementsByClassName(\"slider\");\n    let outputs = document.getElementsByClassName(\"output\");\n    \n    for(let i = 0; i < sliders.length; i++) {\n        let slider = sliders[i];\n        let output = outputs[i];\n        let setValue = (setContext) => {\n            let val = slider.value;\n            let values = Array.from(sliders).map(s => +s.value);\n            output.innerText = formatOutputValues(val);\n            //hardcoded for now\n            let csvOutput = \"value,label\\n\";\n            for (let j = 0; j < names.length; j++) {\n                csvOutput += values[j] + \",\" + names[j] + \"\\n\";\n            }\n            if (setContext === true) {\n                this.context.set(\"values\", this.isMulti ? values : values[0]);\n                this.context.set(\"namesandvalues\", csvOutput);\n            }\n        };\n        slider.addEventListener(\"mousedown\", () => {\n            setValue();\n            slider.onmousemove = setValue;\n        });\n        slider.addEventListener(\"mouseup\", () => {\n            setValue(true);\n            slider.onmousemove = null;\n        });\n    }\n    \n    let button = document.querySelector(\"button\");\n    button.addEventListener(\"click\", () => {\n        for(let i = 0; i < sliders.length; i++) {\n            let slider = sliders[i];\n            let output = outputs[i];\n            slider.value = config.defaultVal;\n            output.innerText = formatOutputValues(config.defaultVal);\n        }\n        let values = Array(sliders.length).fill(config.defaultVal);\n        this.context.set(\"values\", this.isMulti ? values : values[0]);\n    });\n    button.style.display = config.showReset ? \"\" : \"none\";\n};\n\nthis.initialize = function () {\n    return Promise.resolve();\n}"},"functionType":"UserDefinedEvalPart","arguments":[{"typeAnnotation":"Any","name":"Names","metadata":null,"defaultValue":{"typeName":"Any","value":""}},{"typeAnnotation":"Any","name":"values","metadata":null,"defaultValue":{"typeName":"Any","value":""}},{"typeAnnotation":"Any","name":"namesandvalues","metadata":null,"defaultValue":null},{"name":"config","typeAnnotation":"Any","defaultValue":null,"metadata":null}],"returnType":"Any"}