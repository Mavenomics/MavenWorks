{
	"typeName": "Part",
	"id": "2921f923-e4f7-99a1-4bdb-d543d4d47f30",
	"name": "DateRangeSlider",
	"path": "/Parts/DateRangeSlider",
	"data": {
		"htmlText": "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/11.0.3/nouislider.min.css\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/11.0.3/nouislider.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/wnumb/1.1.0/wNumb.min.js\"></script>\n\n<div id=\"container\">\n    <div id=\"slider\"></div>\n    <div id=\"event-start\" class=\"text-out\"></div>\n    <div id=\"event-end\" class=\"text-out\"></div>    \n</div>\n",
		"cssText": "#container {\n    margin: auto;\n    min-width: 10%;\n    padding: 20px;\n}\n\n.text-out {\n    font: 400 12px Arial;\n    color: #888;\n    display: block;\n    margin: 15px 0;\n    text-align: center;\n}\n\n.noUi-connect {\n    background: #555 !important;\n}",
		"jsText": "this.render = function(args) {\n    let rangeStart = args[0],\n        rangeEnd = args[1],\n        selectedStart = convertMavenDate(args[2]),\n        selectedEnd = convertMavenDate(args[3]);\n    \n    var dateSlider = document.getElementById('slider');\n    if (dateSlider.noUiSlider) {\n        dateSlider.noUiSlider.destroy();\n    }\n    dateSlider.innerHTML = \"\";\n    noUiSlider.create(dateSlider, {\n        connect: true,\n    // Create two timestamps to define a range.\n        range: {\n            min: timestamp(rangeStart),\n            max: timestamp(rangeEnd)\n        },\n    // Steps of one week\n        step: 7 * 24 * 60 * 60 * 1000,\n    \n    // Two more timestamps indicate the handle starting positions.\n        start: [ timestamp(selectedStart), timestamp(selectedEnd) ],\n    \n    // No decimals\n    \tformat: wNumb({\n    \t\tdecimals: 0\n    \t})\n    });\n    var dateValues = [\n    \tdocument.getElementById('event-start'),\n    \tdocument.getElementById('event-end')\n    ];\n    \n    var skip2 = 0;\n    dateSlider.noUiSlider.on('update', ( values, handle ) => {\n        let modifiedDate = new Date(+values[handle]);\n        dateValues[handle].innerHTML = formatDate(modifiedDate);\n        if (skip2 >= 2) {\n            if (handle == 0) {\n                this.context.set(\"SelectedStart\", contextTimeStyle(modifiedDate));\n            } else {\n                this.context.set(\"SelectedEnd\", contextTimeStyle(modifiedDate));\n            }\n        } else {\n            skip2++;\n        }\n    });\n    \n    \n}\nthis.initialize = function() {\n\treturn Promise.resolve();\n}\n\n// Create a new date from a string, return as a timestamp.\nfunction timestamp(str){\n    return new Date(str).getTime();   \n}\n\nfunction contextTimeStyle(_date){\n    return _date.getFullYear() * 10000 + _date.getMonth() * 100 + _date.getDate();\n}\n\nfunction convertMavenDate(dateNum) {\n    let strDate = dateNum.toString();\n    return new Date(strDate.substr(4, 2) + \"-\" + strDate.substr(6, 2) + \"-\" + strDate.substr(0, 4));\n}\n\n// Create a list of day and monthnames.\nvar\tweekdays = [\n\t\t\"Sunday\", \"Monday\", \"Tuesday\",\n\t\t\"Wednesday\", \"Thursday\", \"Friday\",\n\t\t\"Saturday\"\n\t],\n\tmonths = [\n\t\t\"January\", \"February\", \"March\",\n\t\t\"April\", \"May\", \"June\", \"July\",\n\t\t\"August\", \"September\", \"October\",\n\t\t\"November\", \"December\"\n\t];\n\n// Append a suffix to dates.\n// Example: 23 => 23rd, 1 => 1st.\nfunction nth (d) {\n  if(d>3 && d<21) return 'th';\n  switch (d % 10) {\n        case 1:  return \"st\";\n        case 2:  return \"nd\";\n        case 3:  return \"rd\";\n        default: return \"th\";\n    }\n}\n\n// Create a string representation of the date.\nfunction formatDate ( date ) {\n    return weekdays[date.getDay()] + \", \" +\n        date.getDate() + nth(date.getDate()) + \" \" +\n        months[date.getMonth()] + \" \" +\n        date.getFullYear();\n}\n"
	},
	"functionType": "UserDefinedEvalPart",
	"arguments": [
		{
			"typeAnnotation": "Date",
			"name": "RangeStart",
			"metadata": null,
			"defaultValue": {
				"typeName": "Date",
				"value": 821336400000
			}
		},
		{
			"typeAnnotation": "Date",
			"name": "RangeEnd",
			"metadata": null,
			"defaultValue": {
				"typeName": "Date",
				"value": 1339473600000
			}
		},
		{
			"typeAnnotation": "Number",
			"name": "SelectedStart",
			"metadata": null,
			"defaultValue": {
				"typeName": "Number",
				"value": {
					"val": 19981020,
					"boxed": false
				}
			}
		},
		{
			"typeAnnotation": "Number",
			"name": "SelectedEnd",
			"metadata": null,
			"defaultValue": {
				"typeName": "Number",
				"value": {
					"val": 20110423,
					"boxed": false
				}
			}
		}
	],
	"returnType": "Any"
}