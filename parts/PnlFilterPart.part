{"typeName":"Part","id":"36d1999b-3dd6-479a-8658-f3cd143705aa","name":"PnlFilterPart.part","path":"/parts/PnlFilterPart.part","lastModified":"2018-11-03T00:05:05.917Z","data":{"htmlText":"<script\n  src=\"https://code.jquery.com/jquery-1.10.0.min.js\"\n  integrity=\"sha256-2+LznWeWgL7AJ1ciaIG5rFP7GKemzzl+K75tRyTByOE=\"\n  crossorigin=\"anonymous\"></script>\n  \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/list.js/1.5.0/list.min.js\"></script>\n\n<div id=\"container\"></div>\n\n","jsText":"var self = this;\nvar filter = \"\";\nthis.render = function (args) {\n    if (filter == args[1])\n        return;\n    filter = args[1];\n    \n    reset();\n    let lookup = {};\n    let cols = args[0].columnNames;\n    cols.forEach(c => {\n    \tlookup[c] = new Set();\n    });\n    args[0].Rows.forEach(r => {\n    \tcols.forEach(c => {\n    \t\tif (r[c]) {\n    \t\t\tlookup[c].add(r[c]);\n    \t\t}\n    \t});\n    });\n    //lookup[\"Strategy\"].add(null);\n\n    cols.forEach(c => {\n        createSection(c, lookup[c]);\n    });\n    addEventListeners();\n    $('.selectAll').each( (index, value) => {\n            $(value).on('click', () => selectAll(cols[index]));\n        }\n    );\n}\n\nfunction selectAll(sectionName) {\n    debugger;\n    var userList = userListLookup[sectionName];\n    var allSelected = !allSelectedLookup[sectionName];\n    allSelectedLookup[sectionName] = allSelected;\n    userList.items.forEach((i) => {\n        let curVal = i.values();\n        i.values({\n            chk: allSelected,\n            nameLabel: curVal.nameLabel\n        });\n        // //Hack, this is not always set correctly.\n        // $(i.elm.firstElementChild).attr(\"chk\", allSelected);\n    });\n    \n    hackFix();\n}\n\nfunction hackFix() {\n    // until list js fixes boolean attributes\n    let inputs = document.getElementsByClassName(\"chk\")\n    for (let i = 0; i < inputs.length; i++) {\n        if(inputs[i].getAttribute(\"chk\") == \"true\") {\n            inputs[i].checked = true;\n        } else {\n            inputs[i].checked = false;\n        }\n    }\n}\n\nfunction reset() {\n    container.innerHTML = \"\";\n    panelCount = 0;\n    userListLookup = {};\n}\n\nvar panelCount = 0;\nvar userListLookup = {};\nvar allSelectedLookup = {};\nlet container;\nfunction createSection(sectionName, sectionElements) {\n    panelCount++;\n    let template = `<button class=\"accordion\">${sectionName}</button>\n<div class=\"panel\">\n    <input type=\"checkbox\" id=\"${panelCount}\" class=\"selectAll\" value=\"Select All\" checked/>\n    <label>Select All</label>\n    <form>\n        <div id=\"filter${panelCount}\">\n            <input class=\"search\" placeholder=\"search...\" style=\"width:calc(100% - 5px)\" />\n            <ul class=\"list\"></ul>\n        </div>\n    </form>\n</div>\n<hr>`;\n    let div = document.createElement(\"div\")\n    div.innerHTML = template;\n    container.appendChild(div);\n    var options = {\n    valueNames: ['nameLabel', {name: \"chk\", attr: \"chk\"}],\n    item: `<li>\n                <input type=\"checkbox\" class=\"chk\" sectionName=\"${sectionName}\" checked/>\n                <label class=\"nameLabel\">Johny</label>\n            </li>`\n    };\n    var userList = new List(\"filter\" + panelCount, options);\n    var i = 0;\n    sectionElements.forEach(e => {\n            userList.add([\n            {  chk: true, nameLabel: e }\n            ]);\n    })\n    \n    userListLookup[sectionName] = userList;\n    allSelectedLookup[sectionName] = true;\n    hackFix();\n    \n}\n\nfunction addEventListeners() {\n    function updateTextArea() {\n        if (typeof this.checked !== 'undefined') {\n            this.setAttribute(\"chk\", this.checked.toString());\n        }\n        var allVals = {};\n        $('input:checked:not(.selectAll)').each(function() {\n            var sectionName = $(this).attr(\"sectionName\");\n            if (sectionName == \"LongShort\") {\n                sectionName = \"ifelse( quantity > 0, 'Long', quantity < 0, 'Short', 'Flat' )\";\n            }\n            if (sectionName == \"Strategy\") {\n                sectionName = \"UDD( key := '1000123_' || symbol, name := 'Strategy Code' )\";\n            }\n            if (sectionName == \"Sector\") {\n                sectionName = \"sector\";\n            }\n            if (sectionName == \"Industry\") {\n                sectionName = \"industry\";\n            }\n            if (!allVals[sectionName]) {\n                allVals[sectionName] = [];\n            }\n            allVals[sectionName].push(this.nextElementSibling.textContent);\n        });\n        var filterString = \"\";\n        filterString = Object.keys(allVals).map(k => {\n            return k + \" in ( \" + allVals[k].map(v => v ? \"'\" + v + \"'\" : \"null\").join(\", \") + \" )\";\n        }).join(\" and \");\n        if (self.context.get(\"Filter\") != filterString) {\n            filter = filterString;\n            self.context.set(\"Filter\", filterString);\n        }\n    }\n    \n    $(function() {\n        $('input').click(updateTextArea);\n        updateTextArea();\n    });\n    var acc = document.getElementsByClassName(\"accordion\");\n    var i;\n\n    for (i = 0; i < acc.length; i++) {\n      acc[i].addEventListener(\"click\", function() {\n        this.classList.toggle(\"active\");\n        var panel = this.nextElementSibling;\n        if (panel.style.maxHeight){\n          panel.style.maxHeight = null;\n        } else {\n          panel.style.maxHeight = panel.scrollHeight + \"px\";\n        } \n      });\n    }\n}\n\nthis.initialize = function () {\n    container = document.getElementById(\"container\");\n    return Promise.resolve();\n} ","cssText":"body {\n    font-family: Arial, sans-serif;\n    font-size: 14px;\n    vertical-align: top;\n}\nul {\n  padding: 0;\n  margin: 0;\n  \n  list-style-type: none;\n}\nlabel {\n    display:inline-block;\n    margin: 3px;\n}\nli { background: white; }\nli:nth-child(odd) { background: #eee; }\n\n#filter {\n    border: 2px groove;\n}\n.accordion {\n    background-color: #eee;\n    color: #444;\n    cursor: pointer;\n    padding: 6px;\n    width: 100%;\n    border: none;\n    text-align: left;\n    outline: none;\n    font-size: 15px;\n    transition: 0.4s;\n}\n\n.active, .accordion:hover {\n    background-color: #ccc;\n}\n\n.accordion:before {\n    content: '\\25BA';\n    color: #777;\n    font-weight: bold;\n    float: left;\n    margin-right: 5px;\n}\n\n.active:before {\n    content: \"\\25BC\";\n}\n\n.panel {\n    margin-top: 5px;\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.2s ease-out;\n}"},"functionType":"UserDefinedEvalPart","arguments":[{"name":"Input Data","typeAnnotation":"Table","defaultValue":null,"metadata":null},{"name":"Filter","typeAnnotation":"String","defaultValue":null,"metadata":null}],"returnType":"Any"}